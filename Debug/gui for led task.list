
gui for led task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005188  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f0  080054f0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080054f0  080054f0  000064f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f8  080054f8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f8  080054f8  000064f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005500  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  0800555c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800555c  00007318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7da  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207a  00000000  00000000  00016866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000188e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aec  00000000  00000000  000196e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029abb  00000000  00000000  0001a1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b2b  00000000  00000000  00043c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102ae6  00000000  00000000  000547ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001572a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000406c  00000000  00000000  001572e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0015b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005320 	.word	0x08005320

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08005320 	.word	0x08005320

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
char input[10];
uint32_t pwm_frequency;
uint32_t arr_value;

int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
    HAL_Init();
 8000586:	f000 faa6 	bl	8000ad6 <HAL_Init>
    SystemClock_Config();
 800058a:	f000 f873 	bl	8000674 <SystemClock_Config>

    MX_GPIO_Init();
 800058e:	f000 f8b9 	bl	8000704 <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 8000592:	f000 f8e3 	bl	800075c <MX_LPUART1_UART_Init>

    while (1)
    {
        // Prompt for PWM frequency
        uart_buf_len = sprintf(uart_buf, "Enter PWM Frequency (Hz):\r\n");
 8000596:	492c      	ldr	r1, [pc, #176]	@ (8000648 <main+0xc8>)
 8000598:	482c      	ldr	r0, [pc, #176]	@ (800064c <main+0xcc>)
 800059a:	f004 fa21 	bl	80049e0 <siprintf>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000650 <main+0xd0>)
 80005a2:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80005a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000650 <main+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	4927      	ldr	r1, [pc, #156]	@ (800064c <main+0xcc>)
 80005b0:	4828      	ldr	r0, [pc, #160]	@ (8000654 <main+0xd4>)
 80005b2:	f002 fff6 	bl	80035a2 <HAL_UART_Transmit>

        // Receive PWM frequency from UART
        HAL_UART_Receive(&hlpuart1, (uint8_t*)input, sizeof(input), HAL_MAX_DELAY);
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	220a      	movs	r2, #10
 80005bc:	4926      	ldr	r1, [pc, #152]	@ (8000658 <main+0xd8>)
 80005be:	4825      	ldr	r0, [pc, #148]	@ (8000654 <main+0xd4>)
 80005c0:	f003 f878 	bl	80036b4 <HAL_UART_Receive>
        pwm_frequency = atoi(input);  // Convert input string to integer
 80005c4:	4824      	ldr	r0, [pc, #144]	@ (8000658 <main+0xd8>)
 80005c6:	f004 f982 	bl	80048ce <atoi>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b23      	ldr	r3, [pc, #140]	@ (800065c <main+0xdc>)
 80005d0:	601a      	str	r2, [r3, #0]

        // Calculate ARR value
        arr_value = (uint32_t)(((80000000)/ (pwm_frequency * (7999 + 1))) - 1);
 80005d2:	4b22      	ldr	r3, [pc, #136]	@ (800065c <main+0xdc>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	4a20      	ldr	r2, [pc, #128]	@ (8000660 <main+0xe0>)
 80005e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e4:	3b01      	subs	r3, #1
 80005e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000664 <main+0xe4>)
 80005e8:	6013      	str	r3, [r2, #0]

        // Display calculated ARR value
        uart_buf_len = sprintf(uart_buf, "Value of ARR/Period is: %lu\r\n", arr_value);
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <main+0xe4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	491d      	ldr	r1, [pc, #116]	@ (8000668 <main+0xe8>)
 80005f2:	4816      	ldr	r0, [pc, #88]	@ (800064c <main+0xcc>)
 80005f4:	f004 f9f4 	bl	80049e0 <siprintf>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <main+0xd0>)
 80005fc:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <main+0xd0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	b29a      	uxth	r2, r3
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	4910      	ldr	r1, [pc, #64]	@ (800064c <main+0xcc>)
 800060a:	4812      	ldr	r0, [pc, #72]	@ (8000654 <main+0xd4>)
 800060c:	f002 ffc9 	bl	80035a2 <HAL_UART_Transmit>

        // Initialize Timer 4 with the calculated ARR value
        MX_TIM4_Init(pwm_frequency);
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <main+0xdc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f8cd 	bl	80007b4 <MX_TIM4_Init>

        // Start PWM
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800061a:	210c      	movs	r1, #12
 800061c:	4813      	ldr	r0, [pc, #76]	@ (800066c <main+0xec>)
 800061e:	f002 f9b7 	bl	8002990 <HAL_TIM_PWM_Start>

        // Toggle LED to visualize PWM effect
        for (int i = 0; i < 10; i++)
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	e00a      	b.n	800063e <main+0xbe>
        {
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000628:	2180      	movs	r1, #128	@ 0x80
 800062a:	4811      	ldr	r0, [pc, #68]	@ (8000670 <main+0xf0>)
 800062c:	f000 fe0e 	bl	800124c <HAL_GPIO_TogglePin>
            HAL_Delay(500); // Adjust delay for visible blinking
 8000630:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000634:	f000 fac4 	bl	8000bc0 <HAL_Delay>
        for (int i = 0; i < 10; i++)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b09      	cmp	r3, #9
 8000642:	ddf1      	ble.n	8000628 <main+0xa8>
        uart_buf_len = sprintf(uart_buf, "Enter PWM Frequency (Hz):\r\n");
 8000644:	e7a7      	b.n	8000596 <main+0x16>
 8000646:	bf00      	nop
 8000648:	08005338 	.word	0x08005338
 800064c:	2000014c 	.word	0x2000014c
 8000650:	200001b0 	.word	0x200001b0
 8000654:	20000078 	.word	0x20000078
 8000658:	200001b4 	.word	0x200001b4
 800065c:	200001c0 	.word	0x200001c0
 8000660:	04c4b400 	.word	0x04c4b400
 8000664:	200001c4 	.word	0x200001c4
 8000668:	08005354 	.word	0x08005354
 800066c:	20000100 	.word	0x20000100
 8000670:	48000400 	.word	0x48000400

08000674 <SystemClock_Config>:
    }
}

// System Clock Configuration
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b096      	sub	sp, #88	@ 0x58
 8000678:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2244      	movs	r2, #68	@ 0x44
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 f9cc 	bl	8004a20 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800069e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2340      	movs	r3, #64	@ 0x40
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 20;
 80006b0:	2314      	movs	r3, #20
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fdf9 	bl	80012bc <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x60>
    {
        Error_Handler();
 80006d0:	f000 f8c6 	bl	8000860 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	603b      	str	r3, [r7, #0]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2303      	movs	r3, #3
 80006da:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	2104      	movs	r1, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f9ff 	bl	8001af0 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x88>
    {
        Error_Handler();
 80006f8:	f000 f8b2 	bl	8000860 <Error_Handler>
    }
}
 80006fc:	bf00      	nop
 80006fe:	3758      	adds	r7, #88	@ 0x58
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <MX_GPIO_Init>:

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_GPIO_Init+0x50>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071c:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <MX_GPIO_Init+0x50>)
 800071e:	f043 0302 	orr.w	r3, r3, #2
 8000722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000724:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_GPIO_Init+0x50>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000728:	f003 0302 	and.w	r3, r3, #2
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

    // Configure GPIO pin PB7 (LED)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_GPIO_Init+0x54>)
 8000746:	f000 fbef 	bl	8000f28 <HAL_GPIO_Init>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <MX_LPUART1_UART_Init>:

// LPUART1 Initialization Function
static void MX_LPUART1_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    hlpuart1.Instance = LPUART1;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 8000762:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <MX_LPUART1_UART_Init+0x54>)
 8000764:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_LPUART1_UART_Init+0x50>)
 800079a:	f002 feb4 	bl	8003506 <HAL_UART_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_LPUART1_UART_Init+0x4c>
    {
        Error_Handler();
 80007a4:	f000 f85c 	bl	8000860 <Error_Handler>
    }
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000078 	.word	0x20000078
 80007b0:	40008000 	.word	0x40008000

080007b4 <MX_TIM4_Init>:

// Timer 4 Initialization Function
static void MX_TIM4_Init(uint32_t pwm_frequency)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]
    uint32_t prescaler = 7999;
 80007d0:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 80007d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t arr_value = ((80000000) / (pwm_frequency * (prescaler + 1))) - 1;
 80007d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d8:	3301      	adds	r3, #1
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	fb02 f303 	mul.w	r3, r2, r3
 80007e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000854 <MX_TIM4_Init+0xa0>)
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	3b01      	subs	r3, #1
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t pulse_value = arr_value / 2; // 50% duty cycle
 80007ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24

    htim4.Instance = TIM4;
 80007f0:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <MX_TIM4_Init+0xa4>)
 80007f2:	4a1a      	ldr	r2, [pc, #104]	@ (800085c <MX_TIM4_Init+0xa8>)
 80007f4:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = prescaler;
 80007f6:	4a18      	ldr	r2, [pc, #96]	@ (8000858 <MX_TIM4_Init+0xa4>)
 80007f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007fa:	6053      	str	r3, [r2, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_TIM4_Init+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = arr_value;
 8000802:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <MX_TIM4_Init+0xa4>)
 8000804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000806:	60d3      	str	r3, [r2, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_TIM4_Init+0xa4>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080e:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_TIM4_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000814:	4810      	ldr	r0, [pc, #64]	@ (8000858 <MX_TIM4_Init+0xa4>)
 8000816:	f002 f859 	bl	80028cc <HAL_TIM_PWM_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM4_Init+0x70>
    {
        Error_Handler();
 8000820:	f000 f81e 	bl	8000860 <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000824:	2360      	movs	r3, #96	@ 0x60
 8000826:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = pulse_value;
 8000828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082a:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	220c      	movs	r2, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4806      	ldr	r0, [pc, #24]	@ (8000858 <MX_TIM4_Init+0xa4>)
 800083e:	f002 f9ad 	bl	8002b9c <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM4_Init+0x98>
    {
        Error_Handler();
 8000848:	f000 f80a 	bl	8000860 <Error_Handler>
    }
}
 800084c:	bf00      	nop
 800084e:	3730      	adds	r7, #48	@ 0x30
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	04c4b400 	.word	0x04c4b400
 8000858:	20000100 	.word	0x20000100
 800085c:	40000800 	.word	0x40000800

08000860 <Error_Handler>:

// Error Handler
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
    while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x4>

08000868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000872:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6613      	str	r3, [r2, #96]	@ 0x60
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_MspInit+0x44>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	6593      	str	r3, [r2, #88]	@ 0x58
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0ac      	sub	sp, #176	@ 0xb0
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	228c      	movs	r2, #140	@ 0x8c
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 f8a5 	bl	8004a20 <memset>
  if(huart->Instance==LPUART1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a26      	ldr	r2, [pc, #152]	@ (8000974 <HAL_UART_MspInit+0xc4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d145      	bne.n	800096c <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008e0:	2320      	movs	r3, #32
 80008e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fb23 	bl	8001f38 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f8:	f7ff ffb2 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <HAL_UART_MspInit+0xc8>)
 80008fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000900:	4a1d      	ldr	r2, [pc, #116]	@ (8000978 <HAL_UART_MspInit+0xc8>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <HAL_UART_MspInit+0xc8>)
 800090a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_UART_MspInit+0xc8>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000918:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <HAL_UART_MspInit+0xc8>)
 800091a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800091e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <HAL_UART_MspInit+0xc8>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800092c:	f000 fcb6 	bl	800129c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000930:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000934:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800094a:	2308      	movs	r3, #8
 800094c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000950:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000954:	4619      	mov	r1, r3
 8000956:	4809      	ldr	r0, [pc, #36]	@ (800097c <HAL_UART_MspInit+0xcc>)
 8000958:	f000 fae6 	bl	8000f28 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2046      	movs	r0, #70	@ 0x46
 8000962:	f000 fa2c 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000966:	2046      	movs	r0, #70	@ 0x46
 8000968:	f000 fa45 	bl	8000df6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800096c:	bf00      	nop
 800096e:	37b0      	adds	r7, #176	@ 0xb0
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40008000 	.word	0x40008000
 8000978:	40021000 	.word	0x40021000
 800097c:	48001800 	.word	0x48001800

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <NMI_Handler+0x4>

08000988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d6:	f000 f8d3 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <LPUART1_IRQHandler+0x10>)
 80009e6:	f002 ff2f 	bl	8003848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000078 	.word	0x20000078

080009f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a14      	ldr	r2, [pc, #80]	@ (8000a50 <_sbrk+0x5c>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <_sbrk+0x60>)
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <_sbrk+0x64>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <_sbrk+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d207      	bcs.n	8000a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a24:	f004 f804 	bl	8004a30 <__errno>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	e009      	b.n	8000a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <_sbrk+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20050000 	.word	0x20050000
 8000a54:	00000400 	.word	0x00000400
 8000a58:	200001c8 	.word	0x200001c8
 8000a5c:	20000318 	.word	0x20000318

08000a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff ffea 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	@ (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f003 ffc3 	bl	8004a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fd63 	bl	8000580 <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ac8:	08005500 	.word	0x08005500
  ldr r2, =_sbss
 8000acc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ad0:	20000318 	.word	0x20000318

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>

08000ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f961 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f80e 	bl	8000b08 <HAL_InitTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	e001      	b.n	8000afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af8:	f7ff feb6 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_InitTick+0x6c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d023      	beq.n	8000b64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b1c:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <HAL_InitTick+0x70>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <HAL_InitTick+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f96d 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10f      	bne.n	8000b5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d809      	bhi.n	8000b58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f937 	bl	8000dbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b50:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <HAL_InitTick+0x74>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e007      	b.n	8000b68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e004      	b.n	8000b68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e001      	b.n	8000b68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	200001cc 	.word	0x200001cc

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200001cc 	.word	0x200001cc

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff ffee 	bl	8000ba8 <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffde 	bl	8000ba8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	@ (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	@ (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	@ 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff29 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff3e 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff31 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa2 	bl	8000d64 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d008      	beq.n	8000e54 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2204      	movs	r2, #4
 8000e46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e022      	b.n	8000e9a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 020e 	bic.w	r2, r2, #14
 8000e62:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0201 	bic.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e78:	f003 021c 	and.w	r2, r3, #28
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	2101      	movs	r1, #1
 8000e82:	fa01 f202 	lsl.w	r2, r1, r2
 8000e86:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d005      	beq.n	8000eca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e029      	b.n	8000f1e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 020e 	bic.w	r2, r2, #14
 8000ed8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	f003 021c 	and.w	r2, r3, #28
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	4798      	blx	r3
    }
  }
  return status;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e166      	b.n	8001206 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8158 	beq.w	8001200 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x40>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d017      	beq.n	8001006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d123      	bne.n	800105a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	6939      	ldr	r1, [r7, #16]
 8001056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0203 	and.w	r2, r3, #3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80b2 	beq.w	8001200 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109c:	4b61      	ldr	r3, [pc, #388]	@ (8001224 <HAL_GPIO_Init+0x2fc>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a0:	4a60      	ldr	r2, [pc, #384]	@ (8001224 <HAL_GPIO_Init+0x2fc>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001224 <HAL_GPIO_Init+0x2fc>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010b4:	4a5c      	ldr	r2, [pc, #368]	@ (8001228 <HAL_GPIO_Init+0x300>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010de:	d02b      	beq.n	8001138 <HAL_GPIO_Init+0x210>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a52      	ldr	r2, [pc, #328]	@ (800122c <HAL_GPIO_Init+0x304>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d025      	beq.n	8001134 <HAL_GPIO_Init+0x20c>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a51      	ldr	r2, [pc, #324]	@ (8001230 <HAL_GPIO_Init+0x308>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d01f      	beq.n	8001130 <HAL_GPIO_Init+0x208>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a50      	ldr	r2, [pc, #320]	@ (8001234 <HAL_GPIO_Init+0x30c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d019      	beq.n	800112c <HAL_GPIO_Init+0x204>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001238 <HAL_GPIO_Init+0x310>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x200>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4e      	ldr	r2, [pc, #312]	@ (800123c <HAL_GPIO_Init+0x314>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1fc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4d      	ldr	r2, [pc, #308]	@ (8001240 <HAL_GPIO_Init+0x318>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1f8>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4c      	ldr	r2, [pc, #304]	@ (8001244 <HAL_GPIO_Init+0x31c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1f4>
 8001118:	2307      	movs	r3, #7
 800111a:	e00e      	b.n	800113a <HAL_GPIO_Init+0x212>
 800111c:	2308      	movs	r3, #8
 800111e:	e00c      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001120:	2306      	movs	r3, #6
 8001122:	e00a      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001124:	2305      	movs	r3, #5
 8001126:	e008      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001128:	2304      	movs	r3, #4
 800112a:	e006      	b.n	800113a <HAL_GPIO_Init+0x212>
 800112c:	2303      	movs	r3, #3
 800112e:	e004      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001130:	2302      	movs	r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001138:	2300      	movs	r3, #0
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4093      	lsls	r3, r2
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800114a:	4937      	ldr	r1, [pc, #220]	@ (8001228 <HAL_GPIO_Init+0x300>)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001158:	4b3b      	ldr	r3, [pc, #236]	@ (8001248 <HAL_GPIO_Init+0x320>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800117c:	4a32      	ldr	r2, [pc, #200]	@ (8001248 <HAL_GPIO_Init+0x320>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001182:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <HAL_GPIO_Init+0x320>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a6:	4a28      	ldr	r2, [pc, #160]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fa:	4a13      	ldr	r2, [pc, #76]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	f47f ae91 	bne.w	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	48000400 	.word	0x48000400
 8001230:	48000800 	.word	0x48000800
 8001234:	48000c00 	.word	0x48000c00
 8001238:	48001000 	.word	0x48001000
 800123c:	48001400 	.word	0x48001400
 8001240:	48001800 	.word	0x48001800
 8001244:	48001c00 	.word	0x48001c00
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4013      	ands	r3, r2
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43d9      	mvns	r1, r3
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	400b      	ands	r3, r1
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <HAL_PWREx_GetVoltageRange+0x18>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007000 	.word	0x40007000

0800129c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012aa:	6053      	str	r3, [r2, #4]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40007000 	.word	0x40007000

080012bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f000 bc08 	b.w	8001ae0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d0:	4b96      	ldr	r3, [pc, #600]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012da:	4b94      	ldr	r3, [pc, #592]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80e4 	beq.w	80014ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d007      	beq.n	8001308 <HAL_RCC_OscConfig+0x4c>
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b0c      	cmp	r3, #12
 80012fc:	f040 808b 	bne.w	8001416 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b01      	cmp	r3, #1
 8001304:	f040 8087 	bne.w	8001416 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001308:	4b88      	ldr	r3, [pc, #544]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_RCC_OscConfig+0x64>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e3df      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	4b81      	ldr	r3, [pc, #516]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_RCC_OscConfig+0x7e>
 8001330:	4b7e      	ldr	r3, [pc, #504]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001338:	e005      	b.n	8001346 <HAL_RCC_OscConfig+0x8a>
 800133a:	4b7c      	ldr	r3, [pc, #496]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 800133c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001346:	4293      	cmp	r3, r2
 8001348:	d223      	bcs.n	8001392 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fd92 	bl	8001e78 <RCC_SetFlashLatencyFromMSIRange>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e3c0      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800135e:	4b73      	ldr	r3, [pc, #460]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a72      	ldr	r2, [pc, #456]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b70      	ldr	r3, [pc, #448]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	496d      	ldr	r1, [pc, #436]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137c:	4b6b      	ldr	r3, [pc, #428]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	4968      	ldr	r1, [pc, #416]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
 8001390:	e025      	b.n	80013de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001392:	4b66      	ldr	r3, [pc, #408]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a65      	ldr	r2, [pc, #404]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b63      	ldr	r3, [pc, #396]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4960      	ldr	r1, [pc, #384]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b0:	4b5e      	ldr	r3, [pc, #376]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	495b      	ldr	r1, [pc, #364]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d109      	bne.n	80013de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fd52 	bl	8001e78 <RCC_SetFlashLatencyFromMSIRange>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e380      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013de:	f000 fc87 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b51      	ldr	r3, [pc, #324]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	4950      	ldr	r1, [pc, #320]	@ (8001530 <HAL_RCC_OscConfig+0x274>)
 80013f0:	5ccb      	ldrb	r3, [r1, r3]
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001534 <HAL_RCC_OscConfig+0x278>)
 80013fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fb80 	bl	8000b08 <HAL_InitTick>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d052      	beq.n	80014b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	e364      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d032      	beq.n	8001484 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800141e:	4b43      	ldr	r3, [pc, #268]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a42      	ldr	r2, [pc, #264]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800142a:	f7ff fbbd 	bl	8000ba8 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001432:	f7ff fbb9 	bl	8000ba8 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e34d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001444:	4b39      	ldr	r3, [pc, #228]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001450:	4b36      	ldr	r3, [pc, #216]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a35      	ldr	r2, [pc, #212]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b33      	ldr	r3, [pc, #204]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4930      	ldr	r1, [pc, #192]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146e:	4b2f      	ldr	r3, [pc, #188]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	492b      	ldr	r1, [pc, #172]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
 8001482:	e01a      	b.n	80014ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001484:	4b29      	ldr	r3, [pc, #164]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a28      	ldr	r2, [pc, #160]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb8a 	bl	8000ba8 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001498:	f7ff fb86 	bl	8000ba8 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e31a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x1dc>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d073      	beq.n	80015ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_OscConfig+0x21c>
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d10e      	bne.n	80014f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d10b      	bne.n	80014f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d063      	beq.n	80015ac <HAL_RCC_OscConfig+0x2f0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d15f      	bne.n	80015ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e2f7      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_OscConfig+0x24c>
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e025      	b.n	8001554 <HAL_RCC_OscConfig+0x298>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001510:	d114      	bne.n	800153c <HAL_RCC_OscConfig+0x280>
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a05      	ldr	r2, [pc, #20]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b03      	ldr	r3, [pc, #12]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a02      	ldr	r2, [pc, #8]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e013      	b.n	8001554 <HAL_RCC_OscConfig+0x298>
 800152c:	40021000 	.word	0x40021000
 8001530:	08005374 	.word	0x08005374
 8001534:	20000000 	.word	0x20000000
 8001538:	20000004 	.word	0x20000004
 800153c:	4ba0      	ldr	r3, [pc, #640]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a9f      	ldr	r2, [pc, #636]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b9d      	ldr	r3, [pc, #628]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a9c      	ldr	r2, [pc, #624]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fb24 	bl	8000ba8 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fb20 	bl	8000ba8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	@ 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e2b4      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001576:	4b92      	ldr	r3, [pc, #584]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x2a8>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fb10 	bl	8000ba8 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fb0c 	bl	8000ba8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	@ 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e2a0      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159e:	4b88      	ldr	r3, [pc, #544]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x2d0>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d060      	beq.n	800167c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x310>
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d119      	bne.n	80015fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d116      	bne.n	80015fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015cc:	4b7c      	ldr	r3, [pc, #496]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_OscConfig+0x328>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e27d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4b76      	ldr	r3, [pc, #472]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	061b      	lsls	r3, r3, #24
 80015f2:	4973      	ldr	r1, [pc, #460]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f8:	e040      	b.n	800167c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d023      	beq.n	800164a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001602:	4b6f      	ldr	r3, [pc, #444]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6e      	ldr	r2, [pc, #440]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff facb 	bl	8000ba8 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fac7 	bl	8000ba8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e25b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	4b65      	ldr	r3, [pc, #404]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b62      	ldr	r3, [pc, #392]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	495f      	ldr	r1, [pc, #380]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
 8001648:	e018      	b.n	800167c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164a:	4b5d      	ldr	r3, [pc, #372]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a5c      	ldr	r2, [pc, #368]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff faa7 	bl	8000ba8 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff faa3 	bl	8000ba8 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e237      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001670:	4b53      	ldr	r3, [pc, #332]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d03c      	beq.n	8001702 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01c      	beq.n	80016ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001690:	4b4b      	ldr	r3, [pc, #300]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001696:	4a4a      	ldr	r2, [pc, #296]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fa82 	bl	8000ba8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff fa7e 	bl	8000ba8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e212      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ba:	4b41      	ldr	r3, [pc, #260]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ef      	beq.n	80016a8 <HAL_RCC_OscConfig+0x3ec>
 80016c8:	e01b      	b.n	8001702 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ca:	4b3d      	ldr	r3, [pc, #244]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d0:	4a3b      	ldr	r2, [pc, #236]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7ff fa65 	bl	8000ba8 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fa61 	bl	8000ba8 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1f5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f4:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ef      	bne.n	80016e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80a6 	beq.w	800185c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001714:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	4a26      	ldr	r2, [pc, #152]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800172a:	6593      	str	r3, [r2, #88]	@ 0x58
 800172c:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001738:	2301      	movs	r3, #1
 800173a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_RCC_OscConfig+0x508>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d118      	bne.n	800177a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001748:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <HAL_RCC_OscConfig+0x508>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1d      	ldr	r2, [pc, #116]	@ (80017c4 <HAL_RCC_OscConfig+0x508>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001754:	f7ff fa28 	bl	8000ba8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175c:	f7ff fa24 	bl	8000ba8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e1b8      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_RCC_OscConfig+0x508>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_RCC_OscConfig+0x4d8>
 8001782:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001792:	e029      	b.n	80017e8 <HAL_RCC_OscConfig+0x52c>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b05      	cmp	r3, #5
 800179a:	d115      	bne.n	80017c8 <HAL_RCC_OscConfig+0x50c>
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a2:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b2:	4a03      	ldr	r2, [pc, #12]	@ (80017c0 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017bc:	e014      	b.n	80017e8 <HAL_RCC_OscConfig+0x52c>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
 80017c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ce:	4a9c      	ldr	r2, [pc, #624]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d8:	4b99      	ldr	r3, [pc, #612]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017de:	4a98      	ldr	r2, [pc, #608]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d016      	beq.n	800181e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff f9da 	bl	8000ba8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f6:	e00a      	b.n	800180e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff f9d6 	bl	8000ba8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e168      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180e:	4b8c      	ldr	r3, [pc, #560]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0ed      	beq.n	80017f8 <HAL_RCC_OscConfig+0x53c>
 800181c:	e015      	b.n	800184a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff f9c3 	bl	8000ba8 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff f9bf 	bl	8000ba8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e151      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800183c:	4b80      	ldr	r3, [pc, #512]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ed      	bne.n	8001826 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184a:	7ffb      	ldrb	r3, [r7, #31]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001850:	4b7b      	ldr	r3, [pc, #492]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	4a7a      	ldr	r2, [pc, #488]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800185a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	2b00      	cmp	r3, #0
 8001866:	d03c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01c      	beq.n	80018aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001870:	4b73      	ldr	r3, [pc, #460]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001876:	4a72      	ldr	r2, [pc, #456]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001880:	f7ff f992 	bl	8000ba8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001888:	f7ff f98e 	bl	8000ba8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e122      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800189a:	4b69      	ldr	r3, [pc, #420]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 800189c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ef      	beq.n	8001888 <HAL_RCC_OscConfig+0x5cc>
 80018a8:	e01b      	b.n	80018e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018aa:	4b65      	ldr	r3, [pc, #404]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80018ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018b0:	4a63      	ldr	r2, [pc, #396]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7ff f975 	bl	8000ba8 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c2:	f7ff f971 	bl	8000ba8 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e105      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80018d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ef      	bne.n	80018c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80f9 	beq.w	8001ade <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	f040 80cf 	bne.w	8001a94 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018f6:	4b52      	ldr	r3, [pc, #328]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f003 0203 	and.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001906:	429a      	cmp	r2, r3
 8001908:	d12c      	bne.n	8001964 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	3b01      	subs	r3, #1
 8001916:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d123      	bne.n	8001964 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001926:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d11b      	bne.n	8001964 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001936:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d113      	bne.n	8001964 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	3b01      	subs	r3, #1
 800194a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d109      	bne.n	8001964 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	3b01      	subs	r3, #1
 800195e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d071      	beq.n	8001a48 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d068      	beq.n	8001a3c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800196a:	4b35      	ldr	r3, [pc, #212]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001976:	4b32      	ldr	r3, [pc, #200]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0ac      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001986:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 800198c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001990:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001992:	f7ff f909 	bl	8000ba8 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff f905 	bl	8000ba8 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e099      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ac:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b8:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <HAL_RCC_OscConfig+0x788>)
 80019be:	4013      	ands	r3, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019c8:	3a01      	subs	r2, #1
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019d2:	0212      	lsls	r2, r2, #8
 80019d4:	4311      	orrs	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019da:	0852      	lsrs	r2, r2, #1
 80019dc:	3a01      	subs	r2, #1
 80019de:	0552      	lsls	r2, r2, #21
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019e6:	0852      	lsrs	r2, r2, #1
 80019e8:	3a01      	subs	r2, #1
 80019ea:	0652      	lsls	r2, r2, #25
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019f2:	06d2      	lsls	r2, r2, #27
 80019f4:	430a      	orrs	r2, r1
 80019f6:	4912      	ldr	r1, [pc, #72]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019fc:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a14:	f7ff f8c8 	bl	8000ba8 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f8c4 	bl	8000ba8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <HAL_RCC_OscConfig+0x784>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3a:	e050      	b.n	8001ade <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e04f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
 8001a40:	40021000 	.word	0x40021000
 8001a44:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a48:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d144      	bne.n	8001ade <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a23      	ldr	r2, [pc, #140]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a20      	ldr	r2, [pc, #128]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a6c:	f7ff f89c 	bl	8000ba8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f898 	bl	8000ba8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e02c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x7b8>
 8001a92:	e024      	b.n	8001ade <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d01f      	beq.n	8001ada <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001aa0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f87f 	bl	8000ba8 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f87b 	bl	8000ba8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e00f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f0      	bne.n	8001aae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4905      	ldr	r1, [pc, #20]	@ (8001ae8 <HAL_RCC_OscConfig+0x82c>)
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_RCC_OscConfig+0x830>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
 8001ad8:	e001      	b.n	8001ade <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	feeefffc 	.word	0xfeeefffc

08001af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0e7      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b04:	4b75      	ldr	r3, [pc, #468]	@ (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d910      	bls.n	8001b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b72      	ldr	r3, [pc, #456]	@ (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 0207 	bic.w	r2, r3, #7
 8001b1a:	4970      	ldr	r1, [pc, #448]	@ (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b6e      	ldr	r3, [pc, #440]	@ (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0cf      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d010      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	4b66      	ldr	r3, [pc, #408]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d908      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b63      	ldr	r3, [pc, #396]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4960      	ldr	r1, [pc, #384]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d04c      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b76:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d121      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0a6      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8e:	4b54      	ldr	r3, [pc, #336]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e09a      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e08e      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e086      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b46      	ldr	r3, [pc, #280]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4943      	ldr	r1, [pc, #268]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd8:	f7fe ffe6 	bl	8000ba8 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7fe ffe2 	bl	8000ba8 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e06e      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d010      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	4b31      	ldr	r3, [pc, #196]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d208      	bcs.n	8001c36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	492b      	ldr	r1, [pc, #172]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c36:	4b29      	ldr	r3, [pc, #164]	@ (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d210      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c44:	4b25      	ldr	r3, [pc, #148]	@ (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 0207 	bic.w	r2, r3, #7
 8001c4c:	4923      	ldr	r1, [pc, #140]	@ (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c54:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e036      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4918      	ldr	r1, [pc, #96]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c90:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4910      	ldr	r1, [pc, #64]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca4:	f000 f824 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	490b      	ldr	r1, [pc, #44]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1f4>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	4a09      	ldr	r2, [pc, #36]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_RCC_ClockConfig+0x1fc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe ff1d 	bl	8000b08 <HAL_InitTick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	08005374 	.word	0x08005374
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d08:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x34>
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d121      	bne.n	8001d62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d11e      	bne.n	8001d62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d24:	4b34      	ldr	r3, [pc, #208]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d30:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e005      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d40:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10d      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d102      	bne.n	8001d6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	e004      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d74:	4b23      	ldr	r3, [pc, #140]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d134      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d003      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0xac>
 8001d94:	e005      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d98:	617b      	str	r3, [r7, #20]
      break;
 8001d9a:	e005      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d9e:	617b      	str	r3, [r7, #20]
      break;
 8001da0:	e002      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	617b      	str	r3, [r7, #20]
      break;
 8001da6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	3301      	adds	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	fb03 f202 	mul.w	r2, r3, r2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	0e5b      	lsrs	r3, r3, #25
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001de8:	69bb      	ldr	r3, [r7, #24]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	0800538c 	.word	0x0800538c
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000000 	.word	0x20000000

08001e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e24:	f7ff fff0 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4904      	ldr	r1, [pc, #16]	@ (8001e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08005384 	.word	0x08005384

08001e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e50:	f7ff ffda 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	0adb      	lsrs	r3, r3, #11
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4904      	ldr	r1, [pc, #16]	@ (8001e74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08005384 	.word	0x08005384

08001e78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e84:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e90:	f7ff f9f6 	bl	8001280 <HAL_PWREx_GetVoltageRange>
 8001e94:	6178      	str	r0, [r7, #20]
 8001e96:	e014      	b.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	4a24      	ldr	r2, [pc, #144]	@ (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eb0:	f7ff f9e6 	bl	8001280 <HAL_PWREx_GetVoltageRange>
 8001eb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eba:	4a1d      	ldr	r2, [pc, #116]	@ (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ec8:	d10b      	bne.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b80      	cmp	r3, #128	@ 0x80
 8001ece:	d919      	bls.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ed4:	d902      	bls.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	e013      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001edc:	2301      	movs	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e010      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b80      	cmp	r3, #128	@ 0x80
 8001ee6:	d902      	bls.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ee8:	2303      	movs	r3, #3
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	e00a      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b80      	cmp	r3, #128	@ 0x80
 8001ef2:	d102      	bne.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e004      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b70      	cmp	r3, #112	@ 0x70
 8001efe:	d101      	bne.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f00:	2301      	movs	r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 0207 	bic.w	r2, r3, #7
 8001f0c:	4909      	ldr	r1, [pc, #36]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40022000 	.word	0x40022000

08001f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f40:	2300      	movs	r3, #0
 8001f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f44:	2300      	movs	r3, #0
 8001f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d041      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f5c:	d02a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f5e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f62:	d824      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f68:	d008      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f6e:	d81e      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f78:	d010      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f7a:	e018      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f7c:	4b86      	ldr	r3, [pc, #536]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a85      	ldr	r2, [pc, #532]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f88:	e015      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 facd 	bl	8002530 <RCCEx_PLLSAI1_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f9a:	e00c      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3320      	adds	r3, #32
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fbb6 	bl	8002714 <RCCEx_PLLSAI2_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fac:	e003      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fb6:	7cfb      	ldrb	r3, [r7, #19]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fbc:	4b76      	ldr	r3, [pc, #472]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fca:	4973      	ldr	r1, [pc, #460]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fd2:	e001      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d041      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fe8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fec:	d02a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ff2:	d824      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ff8:	d008      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ffa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ffe:	d81e      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002008:	d010      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800200a:	e018      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800200c:	4b62      	ldr	r3, [pc, #392]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a61      	ldr	r2, [pc, #388]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002016:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002018:	e015      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fa85 	bl	8002530 <RCCEx_PLLSAI1_Config>
 8002026:	4603      	mov	r3, r0
 8002028:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800202a:	e00c      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3320      	adds	r3, #32
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fb6e 	bl	8002714 <RCCEx_PLLSAI2_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800203c:	e003      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	74fb      	strb	r3, [r7, #19]
      break;
 8002042:	e000      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10b      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800204c:	4b52      	ldr	r3, [pc, #328]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002052:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205a:	494f      	ldr	r1, [pc, #316]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002062:	e001      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a0 	beq.w	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800207a:	4b47      	ldr	r3, [pc, #284]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00d      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002090:	4b41      	ldr	r3, [pc, #260]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	4a40      	ldr	r2, [pc, #256]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800209a:	6593      	str	r3, [r2, #88]	@ 0x58
 800209c:	4b3e      	ldr	r3, [pc, #248]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ac:	4b3b      	ldr	r3, [pc, #236]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3a      	ldr	r2, [pc, #232]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fd76 	bl	8000ba8 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7fe fd72 	bl	8000ba8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d902      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	74fb      	strb	r3, [r7, #19]
        break;
 80020d2:	e005      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d4:	4b31      	ldr	r3, [pc, #196]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d15c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01f      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	d019      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002104:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800210e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002110:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002116:	4a20      	ldr	r2, [pc, #128]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002120:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002126:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002130:	4a19      	ldr	r2, [pc, #100]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d016      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7fe fd31 	bl	8000ba8 <HAL_GetTick>
 8002146:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002148:	e00b      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe fd2d 	bl	8000ba8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d902      	bls.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	74fb      	strb	r3, [r7, #19]
            break;
 8002160:	e006      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ec      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002176:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002186:	4904      	ldr	r1, [pc, #16]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800218e:	e009      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
 8002194:	e006      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a4:	7c7b      	ldrb	r3, [r7, #17]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4ba6      	ldr	r3, [pc, #664]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	4aa5      	ldr	r2, [pc, #660]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c2:	4ba0      	ldr	r3, [pc, #640]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c8:	f023 0203 	bic.w	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d0:	499c      	ldr	r1, [pc, #624]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e4:	4b97      	ldr	r3, [pc, #604]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	f023 020c 	bic.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f2:	4994      	ldr	r1, [pc, #592]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002206:	4b8f      	ldr	r3, [pc, #572]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	498b      	ldr	r1, [pc, #556]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002228:	4b86      	ldr	r3, [pc, #536]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	4983      	ldr	r1, [pc, #524]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800224a:	4b7e      	ldr	r3, [pc, #504]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002250:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002258:	497a      	ldr	r1, [pc, #488]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800226c:	4b75      	ldr	r3, [pc, #468]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002272:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	4972      	ldr	r1, [pc, #456]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800228e:	4b6d      	ldr	r3, [pc, #436]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002294:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229c:	4969      	ldr	r1, [pc, #420]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022b0:	4b64      	ldr	r3, [pc, #400]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022be:	4961      	ldr	r1, [pc, #388]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e0:	4958      	ldr	r1, [pc, #352]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022f4:	4b53      	ldr	r3, [pc, #332]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002302:	4950      	ldr	r1, [pc, #320]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002316:	4b4b      	ldr	r3, [pc, #300]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	4947      	ldr	r1, [pc, #284]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002338:	4b42      	ldr	r3, [pc, #264]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	493f      	ldr	r1, [pc, #252]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d028      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800235a:	4b3a      	ldr	r3, [pc, #232]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002360:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002368:	4936      	ldr	r1, [pc, #216]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002374:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002378:	d106      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800237a:	4b32      	ldr	r3, [pc, #200]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4a31      	ldr	r2, [pc, #196]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002380:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002384:	60d3      	str	r3, [r2, #12]
 8002386:	e011      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002390:	d10c      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	2101      	movs	r1, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f8c9 	bl	8002530 <RCCEx_PLLSAI1_Config>
 800239e:	4603      	mov	r3, r0
 80023a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d028      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023b8:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c6:	491f      	ldr	r1, [pc, #124]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023d6:	d106      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a19      	ldr	r2, [pc, #100]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023e2:	60d3      	str	r3, [r2, #12]
 80023e4:	e011      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ee:	d10c      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f89a 	bl	8002530 <RCCEx_PLLSAI1_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002416:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002424:	4907      	ldr	r1, [pc, #28]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002430:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002434:	d108      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002436:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4a02      	ldr	r2, [pc, #8]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002440:	60d3      	str	r3, [r2, #12]
 8002442:	e013      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002444:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800244c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002450:	d10c      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f869 	bl	8002530 <RCCEx_PLLSAI1_Config>
 800245e:	4603      	mov	r3, r0
 8002460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d02f      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002478:	4b2c      	ldr	r3, [pc, #176]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002486:	4929      	ldr	r1, [pc, #164]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002496:	d10d      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	2102      	movs	r1, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f846 	bl	8002530 <RCCEx_PLLSAI1_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d014      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	74bb      	strb	r3, [r7, #18]
 80024b2:	e011      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3320      	adds	r3, #32
 80024c2:	2102      	movs	r1, #2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f925 	bl	8002714 <RCCEx_PLLSAI2_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024f4:	490d      	ldr	r1, [pc, #52]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002508:	4b08      	ldr	r3, [pc, #32]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002518:	4904      	ldr	r1, [pc, #16]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002520:	7cbb      	ldrb	r3, [r7, #18]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000

08002530 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800253e:	4b74      	ldr	r3, [pc, #464]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d018      	beq.n	800257c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800254a:	4b71      	ldr	r3, [pc, #452]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0203 	and.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d10d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
       ||
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002562:	4b6b      	ldr	r3, [pc, #428]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
       ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d047      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	e044      	b.n	8002606 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d018      	beq.n	80025b6 <RCCEx_PLLSAI1_Config+0x86>
 8002584:	2b03      	cmp	r3, #3
 8002586:	d825      	bhi.n	80025d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002588:	2b01      	cmp	r3, #1
 800258a:	d002      	beq.n	8002592 <RCCEx_PLLSAI1_Config+0x62>
 800258c:	2b02      	cmp	r3, #2
 800258e:	d009      	beq.n	80025a4 <RCCEx_PLLSAI1_Config+0x74>
 8002590:	e020      	b.n	80025d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002592:	4b5f      	ldr	r3, [pc, #380]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11d      	bne.n	80025da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a2:	e01a      	b.n	80025da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d116      	bne.n	80025de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b4:	e013      	b.n	80025de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025b6:	4b56      	ldr	r3, [pc, #344]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025c2:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025d2:	e006      	b.n	80025e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e004      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025da:	bf00      	nop
 80025dc:	e002      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025de:	bf00      	nop
 80025e0:	e000      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ea:	4b49      	ldr	r3, [pc, #292]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	430b      	orrs	r3, r1
 8002600:	4943      	ldr	r1, [pc, #268]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002602:	4313      	orrs	r3, r2
 8002604:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d17c      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800260c:	4b40      	ldr	r3, [pc, #256]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a3f      	ldr	r2, [pc, #252]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002618:	f7fe fac6 	bl	8000ba8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800261e:	e009      	b.n	8002634 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002620:	f7fe fac2 	bl	8000ba8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	73fb      	strb	r3, [r7, #15]
        break;
 8002632:	e005      	b.n	8002640 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002634:	4b36      	ldr	r3, [pc, #216]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ef      	bne.n	8002620 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d15f      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800264c:	4b30      	ldr	r3, [pc, #192]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002654:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6892      	ldr	r2, [r2, #8]
 800265c:	0211      	lsls	r1, r2, #8
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	06d2      	lsls	r2, r2, #27
 8002664:	430a      	orrs	r2, r1
 8002666:	492a      	ldr	r1, [pc, #168]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	610b      	str	r3, [r1, #16]
 800266c:	e027      	b.n	80026be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d112      	bne.n	800269a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002674:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800267c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6892      	ldr	r2, [r2, #8]
 8002684:	0211      	lsls	r1, r2, #8
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6912      	ldr	r2, [r2, #16]
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	3a01      	subs	r2, #1
 800268e:	0552      	lsls	r2, r2, #21
 8002690:	430a      	orrs	r2, r1
 8002692:	491f      	ldr	r1, [pc, #124]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	610b      	str	r3, [r1, #16]
 8002698:	e011      	b.n	80026be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800269a:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6892      	ldr	r2, [r2, #8]
 80026aa:	0211      	lsls	r1, r2, #8
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6952      	ldr	r2, [r2, #20]
 80026b0:	0852      	lsrs	r2, r2, #1
 80026b2:	3a01      	subs	r2, #1
 80026b4:	0652      	lsls	r2, r2, #25
 80026b6:	430a      	orrs	r2, r1
 80026b8:	4915      	ldr	r1, [pc, #84]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026be:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a13      	ldr	r2, [pc, #76]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7fe fa6d 	bl	8000ba8 <HAL_GetTick>
 80026ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d0:	e009      	b.n	80026e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026d2:	f7fe fa69 	bl	8000ba8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d902      	bls.n	80026e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	73fb      	strb	r3, [r7, #15]
          break;
 80026e4:	e005      	b.n	80026f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ef      	beq.n	80026d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4903      	ldr	r1, [pc, #12]	@ (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000

08002714 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002722:	4b69      	ldr	r3, [pc, #420]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d018      	beq.n	8002760 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800272e:	4b66      	ldr	r3, [pc, #408]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d10d      	bne.n	800275a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
       ||
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002746:	4b60      	ldr	r3, [pc, #384]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
       ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d047      	beq.n	80027ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e044      	b.n	80027ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d018      	beq.n	800279a <RCCEx_PLLSAI2_Config+0x86>
 8002768:	2b03      	cmp	r3, #3
 800276a:	d825      	bhi.n	80027b8 <RCCEx_PLLSAI2_Config+0xa4>
 800276c:	2b01      	cmp	r3, #1
 800276e:	d002      	beq.n	8002776 <RCCEx_PLLSAI2_Config+0x62>
 8002770:	2b02      	cmp	r3, #2
 8002772:	d009      	beq.n	8002788 <RCCEx_PLLSAI2_Config+0x74>
 8002774:	e020      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002776:	4b54      	ldr	r3, [pc, #336]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11d      	bne.n	80027be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002786:	e01a      	b.n	80027be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002788:	4b4f      	ldr	r3, [pc, #316]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d116      	bne.n	80027c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002798:	e013      	b.n	80027c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800279a:	4b4b      	ldr	r3, [pc, #300]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10f      	bne.n	80027c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027a6:	4b48      	ldr	r3, [pc, #288]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027b6:	e006      	b.n	80027c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      break;
 80027bc:	e004      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027be:	bf00      	nop
 80027c0:	e002      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ce:	4b3e      	ldr	r3, [pc, #248]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	430b      	orrs	r3, r1
 80027e4:	4938      	ldr	r1, [pc, #224]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d166      	bne.n	80028be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027f0:	4b35      	ldr	r3, [pc, #212]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a34      	ldr	r2, [pc, #208]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fc:	f7fe f9d4 	bl	8000ba8 <HAL_GetTick>
 8002800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002802:	e009      	b.n	8002818 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002804:	f7fe f9d0 	bl	8000ba8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d902      	bls.n	8002818 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	73fb      	strb	r3, [r7, #15]
        break;
 8002816:	e005      	b.n	8002824 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002818:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ef      	bne.n	8002804 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d149      	bne.n	80028be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d110      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002830:	4b25      	ldr	r3, [pc, #148]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002838:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6892      	ldr	r2, [r2, #8]
 8002840:	0211      	lsls	r1, r2, #8
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68d2      	ldr	r2, [r2, #12]
 8002846:	06d2      	lsls	r2, r2, #27
 8002848:	430a      	orrs	r2, r1
 800284a:	491f      	ldr	r1, [pc, #124]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	614b      	str	r3, [r1, #20]
 8002850:	e011      	b.n	8002876 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002852:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800285a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6892      	ldr	r2, [r2, #8]
 8002862:	0211      	lsls	r1, r2, #8
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6912      	ldr	r2, [r2, #16]
 8002868:	0852      	lsrs	r2, r2, #1
 800286a:	3a01      	subs	r2, #1
 800286c:	0652      	lsls	r2, r2, #25
 800286e:	430a      	orrs	r2, r1
 8002870:	4915      	ldr	r1, [pc, #84]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002876:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a13      	ldr	r2, [pc, #76]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002880:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe f991 	bl	8000ba8 <HAL_GetTick>
 8002886:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002888:	e009      	b.n	800289e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800288a:	f7fe f98d 	bl	8000ba8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d902      	bls.n	800289e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	73fb      	strb	r3, [r7, #15]
          break;
 800289c:	e005      	b.n	80028aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800289e:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ef      	beq.n	800288a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028b0:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	4903      	ldr	r1, [pc, #12]	@ (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e049      	b.n	8002972 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f841 	bl	800297a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3304      	adds	r3, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f000 fa5a 	bl	8002dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_TIM_PWM_Start+0x24>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e03c      	b.n	8002a2e <HAL_TIM_PWM_Start+0x9e>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d109      	bne.n	80029ce <HAL_TIM_PWM_Start+0x3e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	e02f      	b.n	8002a2e <HAL_TIM_PWM_Start+0x9e>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d109      	bne.n	80029e8 <HAL_TIM_PWM_Start+0x58>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e022      	b.n	8002a2e <HAL_TIM_PWM_Start+0x9e>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d109      	bne.n	8002a02 <HAL_TIM_PWM_Start+0x72>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	e015      	b.n	8002a2e <HAL_TIM_PWM_Start+0x9e>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d109      	bne.n	8002a1c <HAL_TIM_PWM_Start+0x8c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e008      	b.n	8002a2e <HAL_TIM_PWM_Start+0x9e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	bf14      	ite	ne
 8002a28:	2301      	movne	r3, #1
 8002a2a:	2300      	moveq	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e09c      	b.n	8002b70 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d104      	bne.n	8002a46 <HAL_TIM_PWM_Start+0xb6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a44:	e023      	b.n	8002a8e <HAL_TIM_PWM_Start+0xfe>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_PWM_Start+0xc6>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a54:	e01b      	b.n	8002a8e <HAL_TIM_PWM_Start+0xfe>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_PWM_Start+0xd6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a64:	e013      	b.n	8002a8e <HAL_TIM_PWM_Start+0xfe>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b0c      	cmp	r3, #12
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_PWM_Start+0xe6>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a74:	e00b      	b.n	8002a8e <HAL_TIM_PWM_Start+0xfe>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d104      	bne.n	8002a86 <HAL_TIM_PWM_Start+0xf6>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a84:	e003      	b.n	8002a8e <HAL_TIM_PWM_Start+0xfe>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2201      	movs	r2, #1
 8002a94:	6839      	ldr	r1, [r7, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd10 	bl	80034bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a35      	ldr	r2, [pc, #212]	@ (8002b78 <HAL_TIM_PWM_Start+0x1e8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_TIM_PWM_Start+0x13e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a34      	ldr	r2, [pc, #208]	@ (8002b7c <HAL_TIM_PWM_Start+0x1ec>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00e      	beq.n	8002ace <HAL_TIM_PWM_Start+0x13e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a32      	ldr	r2, [pc, #200]	@ (8002b80 <HAL_TIM_PWM_Start+0x1f0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d009      	beq.n	8002ace <HAL_TIM_PWM_Start+0x13e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a31      	ldr	r2, [pc, #196]	@ (8002b84 <HAL_TIM_PWM_Start+0x1f4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d004      	beq.n	8002ace <HAL_TIM_PWM_Start+0x13e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8002b88 <HAL_TIM_PWM_Start+0x1f8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0x142>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_TIM_PWM_Start+0x144>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a22      	ldr	r2, [pc, #136]	@ (8002b78 <HAL_TIM_PWM_Start+0x1e8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01d      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x19e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afa:	d018      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x19e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a22      	ldr	r2, [pc, #136]	@ (8002b8c <HAL_TIM_PWM_Start+0x1fc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x19e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a21      	ldr	r2, [pc, #132]	@ (8002b90 <HAL_TIM_PWM_Start+0x200>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x19e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <HAL_TIM_PWM_Start+0x204>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x19e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a17      	ldr	r2, [pc, #92]	@ (8002b7c <HAL_TIM_PWM_Start+0x1ec>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x19e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <HAL_TIM_PWM_Start+0x1f0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d115      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	4b18      	ldr	r3, [pc, #96]	@ (8002b98 <HAL_TIM_PWM_Start+0x208>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b06      	cmp	r3, #6
 8002b3e:	d015      	beq.n	8002b6c <HAL_TIM_PWM_Start+0x1dc>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b46:	d011      	beq.n	8002b6c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b58:	e008      	b.n	8002b6c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e000      	b.n	8002b6e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40013400 	.word	0x40013400
 8002b80:	40014000 	.word	0x40014000
 8002b84:	40014400 	.word	0x40014400
 8002b88:	40014800 	.word	0x40014800
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40000c00 	.word	0x40000c00
 8002b98:	00010007 	.word	0x00010007

08002b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e0ff      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b14      	cmp	r3, #20
 8002bc6:	f200 80f0 	bhi.w	8002daa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002bca:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002c25 	.word	0x08002c25
 8002bd4:	08002dab 	.word	0x08002dab
 8002bd8:	08002dab 	.word	0x08002dab
 8002bdc:	08002dab 	.word	0x08002dab
 8002be0:	08002c65 	.word	0x08002c65
 8002be4:	08002dab 	.word	0x08002dab
 8002be8:	08002dab 	.word	0x08002dab
 8002bec:	08002dab 	.word	0x08002dab
 8002bf0:	08002ca7 	.word	0x08002ca7
 8002bf4:	08002dab 	.word	0x08002dab
 8002bf8:	08002dab 	.word	0x08002dab
 8002bfc:	08002dab 	.word	0x08002dab
 8002c00:	08002ce7 	.word	0x08002ce7
 8002c04:	08002dab 	.word	0x08002dab
 8002c08:	08002dab 	.word	0x08002dab
 8002c0c:	08002dab 	.word	0x08002dab
 8002c10:	08002d29 	.word	0x08002d29
 8002c14:	08002dab 	.word	0x08002dab
 8002c18:	08002dab 	.word	0x08002dab
 8002c1c:	08002dab 	.word	0x08002dab
 8002c20:	08002d69 	.word	0x08002d69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f970 	bl	8002f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0208 	orr.w	r2, r2, #8
 8002c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0204 	bic.w	r2, r2, #4
 8002c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6999      	ldr	r1, [r3, #24]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	619a      	str	r2, [r3, #24]
      break;
 8002c62:	e0a5      	b.n	8002db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f9e0 	bl	8003030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6999      	ldr	r1, [r3, #24]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	021a      	lsls	r2, r3, #8
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	619a      	str	r2, [r3, #24]
      break;
 8002ca4:	e084      	b.n	8002db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fa49 	bl	8003144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0208 	orr.w	r2, r2, #8
 8002cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0204 	bic.w	r2, r2, #4
 8002cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69d9      	ldr	r1, [r3, #28]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	61da      	str	r2, [r3, #28]
      break;
 8002ce4:	e064      	b.n	8002db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fab1 	bl	8003254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69da      	ldr	r2, [r3, #28]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69d9      	ldr	r1, [r3, #28]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	021a      	lsls	r2, r3, #8
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	61da      	str	r2, [r3, #28]
      break;
 8002d26:	e043      	b.n	8002db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fafa 	bl	8003328 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0208 	orr.w	r2, r2, #8
 8002d42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0204 	bic.w	r2, r2, #4
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d66:	e023      	b.n	8002db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fb3e 	bl	80033f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	021a      	lsls	r2, r3, #8
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002da8:	e002      	b.n	8002db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
      break;
 8002dae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop

08002dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a46      	ldr	r2, [pc, #280]	@ (8002ef0 <TIM_Base_SetConfig+0x12c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de2:	d00f      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a43      	ldr	r2, [pc, #268]	@ (8002ef4 <TIM_Base_SetConfig+0x130>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a42      	ldr	r2, [pc, #264]	@ (8002ef8 <TIM_Base_SetConfig+0x134>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a41      	ldr	r2, [pc, #260]	@ (8002efc <TIM_Base_SetConfig+0x138>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a40      	ldr	r2, [pc, #256]	@ (8002f00 <TIM_Base_SetConfig+0x13c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a35      	ldr	r2, [pc, #212]	@ (8002ef0 <TIM_Base_SetConfig+0x12c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01f      	beq.n	8002e5e <TIM_Base_SetConfig+0x9a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e24:	d01b      	beq.n	8002e5e <TIM_Base_SetConfig+0x9a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a32      	ldr	r2, [pc, #200]	@ (8002ef4 <TIM_Base_SetConfig+0x130>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d017      	beq.n	8002e5e <TIM_Base_SetConfig+0x9a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a31      	ldr	r2, [pc, #196]	@ (8002ef8 <TIM_Base_SetConfig+0x134>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <TIM_Base_SetConfig+0x9a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a30      	ldr	r2, [pc, #192]	@ (8002efc <TIM_Base_SetConfig+0x138>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00f      	beq.n	8002e5e <TIM_Base_SetConfig+0x9a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a2f      	ldr	r2, [pc, #188]	@ (8002f00 <TIM_Base_SetConfig+0x13c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00b      	beq.n	8002e5e <TIM_Base_SetConfig+0x9a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2e      	ldr	r2, [pc, #184]	@ (8002f04 <TIM_Base_SetConfig+0x140>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <TIM_Base_SetConfig+0x9a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2d      	ldr	r2, [pc, #180]	@ (8002f08 <TIM_Base_SetConfig+0x144>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <TIM_Base_SetConfig+0x9a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2c      	ldr	r2, [pc, #176]	@ (8002f0c <TIM_Base_SetConfig+0x148>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d108      	bne.n	8002e70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a16      	ldr	r2, [pc, #88]	@ (8002ef0 <TIM_Base_SetConfig+0x12c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00f      	beq.n	8002ebc <TIM_Base_SetConfig+0xf8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a18      	ldr	r2, [pc, #96]	@ (8002f00 <TIM_Base_SetConfig+0x13c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00b      	beq.n	8002ebc <TIM_Base_SetConfig+0xf8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a17      	ldr	r2, [pc, #92]	@ (8002f04 <TIM_Base_SetConfig+0x140>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d007      	beq.n	8002ebc <TIM_Base_SetConfig+0xf8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a16      	ldr	r2, [pc, #88]	@ (8002f08 <TIM_Base_SetConfig+0x144>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d003      	beq.n	8002ebc <TIM_Base_SetConfig+0xf8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a15      	ldr	r2, [pc, #84]	@ (8002f0c <TIM_Base_SetConfig+0x148>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d103      	bne.n	8002ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d105      	bne.n	8002ee2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f023 0201 	bic.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	611a      	str	r2, [r3, #16]
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40000800 	.word	0x40000800
 8002efc:	40000c00 	.word	0x40000c00
 8002f00:	40013400 	.word	0x40013400
 8002f04:	40014000 	.word	0x40014000
 8002f08:	40014400 	.word	0x40014400
 8002f0c:	40014800 	.word	0x40014800

08002f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f023 0201 	bic.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0303 	bic.w	r3, r3, #3
 8002f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f023 0302 	bic.w	r3, r3, #2
 8002f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800301c <TIM_OC1_SetConfig+0x10c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00f      	beq.n	8002f90 <TIM_OC1_SetConfig+0x80>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a2b      	ldr	r2, [pc, #172]	@ (8003020 <TIM_OC1_SetConfig+0x110>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <TIM_OC1_SetConfig+0x80>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003024 <TIM_OC1_SetConfig+0x114>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <TIM_OC1_SetConfig+0x80>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a29      	ldr	r2, [pc, #164]	@ (8003028 <TIM_OC1_SetConfig+0x118>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_OC1_SetConfig+0x80>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a28      	ldr	r2, [pc, #160]	@ (800302c <TIM_OC1_SetConfig+0x11c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10c      	bne.n	8002faa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f023 0308 	bic.w	r3, r3, #8
 8002f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f023 0304 	bic.w	r3, r3, #4
 8002fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1b      	ldr	r2, [pc, #108]	@ (800301c <TIM_OC1_SetConfig+0x10c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00f      	beq.n	8002fd2 <TIM_OC1_SetConfig+0xc2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8003020 <TIM_OC1_SetConfig+0x110>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_OC1_SetConfig+0xc2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <TIM_OC1_SetConfig+0x114>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_OC1_SetConfig+0xc2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a18      	ldr	r2, [pc, #96]	@ (8003028 <TIM_OC1_SetConfig+0x118>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_OC1_SetConfig+0xc2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	@ (800302c <TIM_OC1_SetConfig+0x11c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d111      	bne.n	8002ff6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	621a      	str	r2, [r3, #32]
}
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40013400 	.word	0x40013400
 8003024:	40014000 	.word	0x40014000
 8003028:	40014400 	.word	0x40014400
 800302c:	40014800 	.word	0x40014800

08003030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f023 0210 	bic.w	r2, r3, #16
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800305e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800306a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f023 0320 	bic.w	r3, r3, #32
 800307e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a28      	ldr	r2, [pc, #160]	@ (8003130 <TIM_OC2_SetConfig+0x100>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_OC2_SetConfig+0x6c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a27      	ldr	r2, [pc, #156]	@ (8003134 <TIM_OC2_SetConfig+0x104>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d10d      	bne.n	80030b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <TIM_OC2_SetConfig+0x100>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00f      	beq.n	80030e0 <TIM_OC2_SetConfig+0xb0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <TIM_OC2_SetConfig+0x104>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00b      	beq.n	80030e0 <TIM_OC2_SetConfig+0xb0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <TIM_OC2_SetConfig+0x108>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d007      	beq.n	80030e0 <TIM_OC2_SetConfig+0xb0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <TIM_OC2_SetConfig+0x10c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d003      	beq.n	80030e0 <TIM_OC2_SetConfig+0xb0>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a19      	ldr	r2, [pc, #100]	@ (8003140 <TIM_OC2_SetConfig+0x110>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d113      	bne.n	8003108 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40013400 	.word	0x40013400
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800

08003144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a27      	ldr	r2, [pc, #156]	@ (8003240 <TIM_OC3_SetConfig+0xfc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_OC3_SetConfig+0x6a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a26      	ldr	r2, [pc, #152]	@ (8003244 <TIM_OC3_SetConfig+0x100>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10d      	bne.n	80031ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003240 <TIM_OC3_SetConfig+0xfc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00f      	beq.n	80031f2 <TIM_OC3_SetConfig+0xae>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003244 <TIM_OC3_SetConfig+0x100>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00b      	beq.n	80031f2 <TIM_OC3_SetConfig+0xae>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003248 <TIM_OC3_SetConfig+0x104>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <TIM_OC3_SetConfig+0xae>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a19      	ldr	r2, [pc, #100]	@ (800324c <TIM_OC3_SetConfig+0x108>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_OC3_SetConfig+0xae>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <TIM_OC3_SetConfig+0x10c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d113      	bne.n	800321a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	621a      	str	r2, [r3, #32]
}
 8003234:	bf00      	nop
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40013400 	.word	0x40013400
 8003248:	40014000 	.word	0x40014000
 800324c:	40014400 	.word	0x40014400
 8003250:	40014800 	.word	0x40014800

08003254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800328e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	031b      	lsls	r3, r3, #12
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a18      	ldr	r2, [pc, #96]	@ (8003314 <TIM_OC4_SetConfig+0xc0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00f      	beq.n	80032d8 <TIM_OC4_SetConfig+0x84>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a17      	ldr	r2, [pc, #92]	@ (8003318 <TIM_OC4_SetConfig+0xc4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00b      	beq.n	80032d8 <TIM_OC4_SetConfig+0x84>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a16      	ldr	r2, [pc, #88]	@ (800331c <TIM_OC4_SetConfig+0xc8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <TIM_OC4_SetConfig+0x84>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a15      	ldr	r2, [pc, #84]	@ (8003320 <TIM_OC4_SetConfig+0xcc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_OC4_SetConfig+0x84>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a14      	ldr	r2, [pc, #80]	@ (8003324 <TIM_OC4_SetConfig+0xd0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d109      	bne.n	80032ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	019b      	lsls	r3, r3, #6
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40013400 	.word	0x40013400
 800331c:	40014000 	.word	0x40014000
 8003320:	40014400 	.word	0x40014400
 8003324:	40014800 	.word	0x40014800

08003328 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800336c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <TIM_OC5_SetConfig+0xb4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00f      	beq.n	80033a2 <TIM_OC5_SetConfig+0x7a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a16      	ldr	r2, [pc, #88]	@ (80033e0 <TIM_OC5_SetConfig+0xb8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00b      	beq.n	80033a2 <TIM_OC5_SetConfig+0x7a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a15      	ldr	r2, [pc, #84]	@ (80033e4 <TIM_OC5_SetConfig+0xbc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <TIM_OC5_SetConfig+0x7a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a14      	ldr	r2, [pc, #80]	@ (80033e8 <TIM_OC5_SetConfig+0xc0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <TIM_OC5_SetConfig+0x7a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a13      	ldr	r2, [pc, #76]	@ (80033ec <TIM_OC5_SetConfig+0xc4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d109      	bne.n	80033b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	621a      	str	r2, [r3, #32]
}
 80033d0:	bf00      	nop
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40013400 	.word	0x40013400
 80033e4:	40014000 	.word	0x40014000
 80033e8:	40014400 	.word	0x40014400
 80033ec:	40014800 	.word	0x40014800

080033f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800341e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	051b      	lsls	r3, r3, #20
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a18      	ldr	r2, [pc, #96]	@ (80034a8 <TIM_OC6_SetConfig+0xb8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00f      	beq.n	800346c <TIM_OC6_SetConfig+0x7c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a17      	ldr	r2, [pc, #92]	@ (80034ac <TIM_OC6_SetConfig+0xbc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00b      	beq.n	800346c <TIM_OC6_SetConfig+0x7c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a16      	ldr	r2, [pc, #88]	@ (80034b0 <TIM_OC6_SetConfig+0xc0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <TIM_OC6_SetConfig+0x7c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a15      	ldr	r2, [pc, #84]	@ (80034b4 <TIM_OC6_SetConfig+0xc4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_OC6_SetConfig+0x7c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a14      	ldr	r2, [pc, #80]	@ (80034b8 <TIM_OC6_SetConfig+0xc8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d109      	bne.n	8003480 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	029b      	lsls	r3, r3, #10
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40013400 	.word	0x40013400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40014400 	.word	0x40014400
 80034b8:	40014800 	.word	0x40014800

080034bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2201      	movs	r2, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	43db      	mvns	r3, r3
 80034de:	401a      	ands	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e040      	b.n	800359a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd f9c1 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2224      	movs	r2, #36	@ 0x24
 8003532:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 ff59 	bl	8004404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fc9e 	bl	8003e94 <UART_SetConfig>
 8003558:	4603      	mov	r3, r0
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e01b      	b.n	800359a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003570:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003580:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 ffd8 	bl	8004548 <UART_CheckIdleState>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b08a      	sub	sp, #40	@ 0x28
 80035a6:	af02      	add	r7, sp, #8
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d177      	bne.n	80036aa <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_UART_Transmit+0x24>
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e070      	b.n	80036ac <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2221      	movs	r2, #33	@ 0x21
 80035d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d8:	f7fd fae6 	bl	8000ba8 <HAL_GetTick>
 80035dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	88fa      	ldrh	r2, [r7, #6]
 80035ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f6:	d108      	bne.n	800360a <HAL_UART_Transmit+0x68>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d104      	bne.n	800360a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	e003      	b.n	8003612 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003612:	e02f      	b.n	8003674 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	2180      	movs	r1, #128	@ 0x80
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f001 f83a 	bl	8004698 <UART_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e03b      	b.n	80036ac <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10b      	bne.n	8003652 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	881a      	ldrh	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003646:	b292      	uxth	r2, r2
 8003648:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	3302      	adds	r3, #2
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e007      	b.n	8003662 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3301      	adds	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1c9      	bne.n	8003614 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2200      	movs	r2, #0
 8003688:	2140      	movs	r1, #64	@ 0x40
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f001 f804 	bl	8004698 <UART_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e005      	b.n	80036ac <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	f040 80b6 	bne.w	800383c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_UART_Receive+0x28>
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0ae      	b.n	800383e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2222      	movs	r2, #34	@ 0x22
 80036ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f6:	f7fd fa57 	bl	8000ba8 <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003714:	d10e      	bne.n	8003734 <HAL_UART_Receive+0x80>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <HAL_UART_Receive+0x76>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003724:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003728:	e02d      	b.n	8003786 <HAL_UART_Receive+0xd2>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	22ff      	movs	r2, #255	@ 0xff
 800372e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003732:	e028      	b.n	8003786 <HAL_UART_Receive+0xd2>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <HAL_UART_Receive+0xa4>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <HAL_UART_Receive+0x9a>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	22ff      	movs	r2, #255	@ 0xff
 8003748:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800374c:	e01b      	b.n	8003786 <HAL_UART_Receive+0xd2>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	227f      	movs	r2, #127	@ 0x7f
 8003752:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003756:	e016      	b.n	8003786 <HAL_UART_Receive+0xd2>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003760:	d10d      	bne.n	800377e <HAL_UART_Receive+0xca>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d104      	bne.n	8003774 <HAL_UART_Receive+0xc0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	227f      	movs	r2, #127	@ 0x7f
 800376e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003772:	e008      	b.n	8003786 <HAL_UART_Receive+0xd2>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	223f      	movs	r2, #63	@ 0x3f
 8003778:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800377c:	e003      	b.n	8003786 <HAL_UART_Receive+0xd2>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800378c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003796:	d108      	bne.n	80037aa <HAL_UART_Receive+0xf6>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	e003      	b.n	80037b2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80037b2:	e037      	b.n	8003824 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2200      	movs	r2, #0
 80037bc:	2120      	movs	r1, #32
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 ff6a 	bl	8004698 <UART_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e033      	b.n	800383e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10c      	bne.n	80037f6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	8a7b      	ldrh	r3, [r7, #18]
 80037e6:	4013      	ands	r3, r2
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	3302      	adds	r3, #2
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	e00d      	b.n	8003812 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	8a7b      	ldrh	r3, [r7, #18]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4013      	ands	r3, r2
 8003806:	b2da      	uxtb	r2, r3
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	3301      	adds	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1c1      	bne.n	80037b4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b0ba      	sub	sp, #232	@ 0xe8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800386e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003872:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003876:	4013      	ands	r3, r2
 8003878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800387c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d115      	bne.n	80038b0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00f      	beq.n	80038b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d009      	beq.n	80038b0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 82ca 	beq.w	8003e3a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
      }
      return;
 80038ae:	e2c4      	b.n	8003e3a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80038b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8117 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80038ca:	4b85      	ldr	r3, [pc, #532]	@ (8003ae0 <HAL_UART_IRQHandler+0x298>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 810a 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d011      	beq.n	8003904 <HAL_UART_IRQHandler+0xbc>
 80038e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00b      	beq.n	8003904 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d011      	beq.n	8003934 <HAL_UART_IRQHandler+0xec>
 8003910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2202      	movs	r2, #2
 8003922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800392a:	f043 0204 	orr.w	r2, r3, #4
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d011      	beq.n	8003964 <HAL_UART_IRQHandler+0x11c>
 8003940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2204      	movs	r2, #4
 8003952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800395a:	f043 0202 	orr.w	r2, r3, #2
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800397c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003980:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2208      	movs	r2, #8
 800398e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003996:	f043 0208 	orr.w	r2, r3, #8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d012      	beq.n	80039d2 <HAL_UART_IRQHandler+0x18a>
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00c      	beq.n	80039d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8230 	beq.w	8003e3e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1a:	2b40      	cmp	r3, #64	@ 0x40
 8003a1c:	d005      	beq.n	8003a2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d04f      	beq.n	8003aca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fea1 	bl	8004772 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3a:	2b40      	cmp	r3, #64	@ 0x40
 8003a3c:	d141      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3308      	adds	r3, #8
 8003a44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3308      	adds	r3, #8
 8003a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1d9      	bne.n	8003a3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d013      	beq.n	8003aba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a96:	4a13      	ldr	r2, [pc, #76]	@ (8003ae4 <HAL_UART_IRQHandler+0x29c>)
 8003a98:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd fa01 	bl	8000ea6 <HAL_DMA_Abort_IT>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d017      	beq.n	8003ada <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	e00f      	b.n	8003ada <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f9d4 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	e00b      	b.n	8003ada <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f9d0 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	e007      	b.n	8003ada <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f9cc 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003ad8:	e1b1      	b.n	8003e3e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ada:	bf00      	nop
    return;
 8003adc:	e1af      	b.n	8003e3e <HAL_UART_IRQHandler+0x5f6>
 8003ade:	bf00      	nop
 8003ae0:	04000120 	.word	0x04000120
 8003ae4:	0800483b 	.word	0x0800483b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 816a 	bne.w	8003dc6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8163 	beq.w	8003dc6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 815c 	beq.w	8003dc6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2210      	movs	r2, #16
 8003b14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	f040 80d4 	bne.w	8003cce <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80ad 	beq.w	8003c96 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b46:	429a      	cmp	r2, r3
 8003b48:	f080 80a5 	bcs.w	8003c96 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 8086 	bne.w	8003c74 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1da      	bne.n	8003b68 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003be8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e1      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e3      	bne.n	8003bee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c44:	f023 0310 	bic.w	r3, r3, #16
 8003c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e4      	bne.n	8003c34 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd f8db 	bl	8000e2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f8f4 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003c94:	e0d5      	b.n	8003e42 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	f040 80ce 	bne.w	8003e42 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	f040 80c5 	bne.w	8003e42 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f8d8 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
      return;
 8003ccc:	e0b9      	b.n	8003e42 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80ab 	beq.w	8003e46 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80a6 	beq.w	8003e46 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e4      	bne.n	8003cfa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d54:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e3      	bne.n	8003d30 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f023 0310 	bic.w	r3, r3, #16
 8003d90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	617b      	str	r3, [r7, #20]
   return(result);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e4      	bne.n	8003d7c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f85c 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dc4:	e03f      	b.n	8003e46 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00e      	beq.n	8003df0 <HAL_UART_IRQHandler+0x5a8>
 8003dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003de6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fd66 	bl	80048ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dee:	e02d      	b.n	8003e4c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00e      	beq.n	8003e1a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01c      	beq.n	8003e4a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
    }
    return;
 8003e18:	e017      	b.n	8003e4a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d012      	beq.n	8003e4c <HAL_UART_IRQHandler+0x604>
 8003e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00c      	beq.n	8003e4c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fd17 	bl	8004866 <UART_EndTransmit_IT>
    return;
 8003e38:	e008      	b.n	8003e4c <HAL_UART_IRQHandler+0x604>
      return;
 8003e3a:	bf00      	nop
 8003e3c:	e006      	b.n	8003e4c <HAL_UART_IRQHandler+0x604>
    return;
 8003e3e:	bf00      	nop
 8003e40:	e004      	b.n	8003e4c <HAL_UART_IRQHandler+0x604>
      return;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <HAL_UART_IRQHandler+0x604>
      return;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <HAL_UART_IRQHandler+0x604>
    return;
 8003e4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e4c:	37e8      	adds	r7, #232	@ 0xe8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop

08003e54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e98:	b08a      	sub	sp, #40	@ 0x28
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4ba4      	ldr	r3, [pc, #656]	@ (8004154 <UART_SetConfig+0x2c0>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a99      	ldr	r2, [pc, #612]	@ (8004158 <UART_SetConfig+0x2c4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efc:	4313      	orrs	r3, r2
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a90      	ldr	r2, [pc, #576]	@ (800415c <UART_SetConfig+0x2c8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d126      	bne.n	8003f6c <UART_SetConfig+0xd8>
 8003f1e:	4b90      	ldr	r3, [pc, #576]	@ (8004160 <UART_SetConfig+0x2cc>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d81b      	bhi.n	8003f64 <UART_SetConfig+0xd0>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <UART_SetConfig+0xa0>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f55 	.word	0x08003f55
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f5d 	.word	0x08003f5d
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f4a:	e116      	b.n	800417a <UART_SetConfig+0x2e6>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f52:	e112      	b.n	800417a <UART_SetConfig+0x2e6>
 8003f54:	2304      	movs	r3, #4
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5a:	e10e      	b.n	800417a <UART_SetConfig+0x2e6>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f62:	e10a      	b.n	800417a <UART_SetConfig+0x2e6>
 8003f64:	2310      	movs	r3, #16
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6a:	e106      	b.n	800417a <UART_SetConfig+0x2e6>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a7c      	ldr	r2, [pc, #496]	@ (8004164 <UART_SetConfig+0x2d0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d138      	bne.n	8003fe8 <UART_SetConfig+0x154>
 8003f76:	4b7a      	ldr	r3, [pc, #488]	@ (8004160 <UART_SetConfig+0x2cc>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b0c      	cmp	r3, #12
 8003f82:	d82d      	bhi.n	8003fe0 <UART_SetConfig+0x14c>
 8003f84:	a201      	add	r2, pc, #4	@ (adr r2, 8003f8c <UART_SetConfig+0xf8>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fc1 	.word	0x08003fc1
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fd1 	.word	0x08003fd1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fe1 	.word	0x08003fe1
 8003fa8:	08003fe1 	.word	0x08003fe1
 8003fac:	08003fc9 	.word	0x08003fc9
 8003fb0:	08003fe1 	.word	0x08003fe1
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fd9 	.word	0x08003fd9
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc6:	e0d8      	b.n	800417a <UART_SetConfig+0x2e6>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fce:	e0d4      	b.n	800417a <UART_SetConfig+0x2e6>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd6:	e0d0      	b.n	800417a <UART_SetConfig+0x2e6>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fde:	e0cc      	b.n	800417a <UART_SetConfig+0x2e6>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe6:	e0c8      	b.n	800417a <UART_SetConfig+0x2e6>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a5e      	ldr	r2, [pc, #376]	@ (8004168 <UART_SetConfig+0x2d4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d125      	bne.n	800403e <UART_SetConfig+0x1aa>
 8003ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8004160 <UART_SetConfig+0x2cc>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ffc:	2b30      	cmp	r3, #48	@ 0x30
 8003ffe:	d016      	beq.n	800402e <UART_SetConfig+0x19a>
 8004000:	2b30      	cmp	r3, #48	@ 0x30
 8004002:	d818      	bhi.n	8004036 <UART_SetConfig+0x1a2>
 8004004:	2b20      	cmp	r3, #32
 8004006:	d00a      	beq.n	800401e <UART_SetConfig+0x18a>
 8004008:	2b20      	cmp	r3, #32
 800400a:	d814      	bhi.n	8004036 <UART_SetConfig+0x1a2>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <UART_SetConfig+0x182>
 8004010:	2b10      	cmp	r3, #16
 8004012:	d008      	beq.n	8004026 <UART_SetConfig+0x192>
 8004014:	e00f      	b.n	8004036 <UART_SetConfig+0x1a2>
 8004016:	2300      	movs	r3, #0
 8004018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401c:	e0ad      	b.n	800417a <UART_SetConfig+0x2e6>
 800401e:	2302      	movs	r3, #2
 8004020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004024:	e0a9      	b.n	800417a <UART_SetConfig+0x2e6>
 8004026:	2304      	movs	r3, #4
 8004028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402c:	e0a5      	b.n	800417a <UART_SetConfig+0x2e6>
 800402e:	2308      	movs	r3, #8
 8004030:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004034:	e0a1      	b.n	800417a <UART_SetConfig+0x2e6>
 8004036:	2310      	movs	r3, #16
 8004038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403c:	e09d      	b.n	800417a <UART_SetConfig+0x2e6>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a4a      	ldr	r2, [pc, #296]	@ (800416c <UART_SetConfig+0x2d8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d125      	bne.n	8004094 <UART_SetConfig+0x200>
 8004048:	4b45      	ldr	r3, [pc, #276]	@ (8004160 <UART_SetConfig+0x2cc>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004052:	2bc0      	cmp	r3, #192	@ 0xc0
 8004054:	d016      	beq.n	8004084 <UART_SetConfig+0x1f0>
 8004056:	2bc0      	cmp	r3, #192	@ 0xc0
 8004058:	d818      	bhi.n	800408c <UART_SetConfig+0x1f8>
 800405a:	2b80      	cmp	r3, #128	@ 0x80
 800405c:	d00a      	beq.n	8004074 <UART_SetConfig+0x1e0>
 800405e:	2b80      	cmp	r3, #128	@ 0x80
 8004060:	d814      	bhi.n	800408c <UART_SetConfig+0x1f8>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <UART_SetConfig+0x1d8>
 8004066:	2b40      	cmp	r3, #64	@ 0x40
 8004068:	d008      	beq.n	800407c <UART_SetConfig+0x1e8>
 800406a:	e00f      	b.n	800408c <UART_SetConfig+0x1f8>
 800406c:	2300      	movs	r3, #0
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004072:	e082      	b.n	800417a <UART_SetConfig+0x2e6>
 8004074:	2302      	movs	r3, #2
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407a:	e07e      	b.n	800417a <UART_SetConfig+0x2e6>
 800407c:	2304      	movs	r3, #4
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004082:	e07a      	b.n	800417a <UART_SetConfig+0x2e6>
 8004084:	2308      	movs	r3, #8
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408a:	e076      	b.n	800417a <UART_SetConfig+0x2e6>
 800408c:	2310      	movs	r3, #16
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004092:	e072      	b.n	800417a <UART_SetConfig+0x2e6>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a35      	ldr	r2, [pc, #212]	@ (8004170 <UART_SetConfig+0x2dc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d12a      	bne.n	80040f4 <UART_SetConfig+0x260>
 800409e:	4b30      	ldr	r3, [pc, #192]	@ (8004160 <UART_SetConfig+0x2cc>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ac:	d01a      	beq.n	80040e4 <UART_SetConfig+0x250>
 80040ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040b2:	d81b      	bhi.n	80040ec <UART_SetConfig+0x258>
 80040b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b8:	d00c      	beq.n	80040d4 <UART_SetConfig+0x240>
 80040ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040be:	d815      	bhi.n	80040ec <UART_SetConfig+0x258>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <UART_SetConfig+0x238>
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c8:	d008      	beq.n	80040dc <UART_SetConfig+0x248>
 80040ca:	e00f      	b.n	80040ec <UART_SetConfig+0x258>
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d2:	e052      	b.n	800417a <UART_SetConfig+0x2e6>
 80040d4:	2302      	movs	r3, #2
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040da:	e04e      	b.n	800417a <UART_SetConfig+0x2e6>
 80040dc:	2304      	movs	r3, #4
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e2:	e04a      	b.n	800417a <UART_SetConfig+0x2e6>
 80040e4:	2308      	movs	r3, #8
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ea:	e046      	b.n	800417a <UART_SetConfig+0x2e6>
 80040ec:	2310      	movs	r3, #16
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040f2:	e042      	b.n	800417a <UART_SetConfig+0x2e6>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a17      	ldr	r2, [pc, #92]	@ (8004158 <UART_SetConfig+0x2c4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d13a      	bne.n	8004174 <UART_SetConfig+0x2e0>
 80040fe:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <UART_SetConfig+0x2cc>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004108:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800410c:	d01a      	beq.n	8004144 <UART_SetConfig+0x2b0>
 800410e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004112:	d81b      	bhi.n	800414c <UART_SetConfig+0x2b8>
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004118:	d00c      	beq.n	8004134 <UART_SetConfig+0x2a0>
 800411a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800411e:	d815      	bhi.n	800414c <UART_SetConfig+0x2b8>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <UART_SetConfig+0x298>
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004128:	d008      	beq.n	800413c <UART_SetConfig+0x2a8>
 800412a:	e00f      	b.n	800414c <UART_SetConfig+0x2b8>
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004132:	e022      	b.n	800417a <UART_SetConfig+0x2e6>
 8004134:	2302      	movs	r3, #2
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413a:	e01e      	b.n	800417a <UART_SetConfig+0x2e6>
 800413c:	2304      	movs	r3, #4
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004142:	e01a      	b.n	800417a <UART_SetConfig+0x2e6>
 8004144:	2308      	movs	r3, #8
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414a:	e016      	b.n	800417a <UART_SetConfig+0x2e6>
 800414c:	2310      	movs	r3, #16
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004152:	e012      	b.n	800417a <UART_SetConfig+0x2e6>
 8004154:	efff69f3 	.word	0xefff69f3
 8004158:	40008000 	.word	0x40008000
 800415c:	40013800 	.word	0x40013800
 8004160:	40021000 	.word	0x40021000
 8004164:	40004400 	.word	0x40004400
 8004168:	40004800 	.word	0x40004800
 800416c:	40004c00 	.word	0x40004c00
 8004170:	40005000 	.word	0x40005000
 8004174:	2310      	movs	r3, #16
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a9f      	ldr	r2, [pc, #636]	@ (80043fc <UART_SetConfig+0x568>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d17a      	bne.n	800427a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004184:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004188:	2b08      	cmp	r3, #8
 800418a:	d824      	bhi.n	80041d6 <UART_SetConfig+0x342>
 800418c:	a201      	add	r2, pc, #4	@ (adr r2, 8004194 <UART_SetConfig+0x300>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041d7 	.word	0x080041d7
 800419c:	080041c1 	.word	0x080041c1
 80041a0:	080041d7 	.word	0x080041d7
 80041a4:	080041c7 	.word	0x080041c7
 80041a8:	080041d7 	.word	0x080041d7
 80041ac:	080041d7 	.word	0x080041d7
 80041b0:	080041d7 	.word	0x080041d7
 80041b4:	080041cf 	.word	0x080041cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b8:	f7fd fe32 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 80041bc:	61f8      	str	r0, [r7, #28]
        break;
 80041be:	e010      	b.n	80041e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c0:	4b8f      	ldr	r3, [pc, #572]	@ (8004400 <UART_SetConfig+0x56c>)
 80041c2:	61fb      	str	r3, [r7, #28]
        break;
 80041c4:	e00d      	b.n	80041e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c6:	f7fd fd93 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 80041ca:	61f8      	str	r0, [r7, #28]
        break;
 80041cc:	e009      	b.n	80041e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d2:	61fb      	str	r3, [r7, #28]
        break;
 80041d4:	e005      	b.n	80041e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80fb 	beq.w	80043e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d305      	bcc.n	8004206 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	429a      	cmp	r2, r3
 8004204:	d903      	bls.n	800420e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800420c:	e0e8      	b.n	80043e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	2200      	movs	r2, #0
 8004212:	461c      	mov	r4, r3
 8004214:	4615      	mov	r5, r2
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	022b      	lsls	r3, r5, #8
 8004220:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004224:	0222      	lsls	r2, r4, #8
 8004226:	68f9      	ldr	r1, [r7, #12]
 8004228:	6849      	ldr	r1, [r1, #4]
 800422a:	0849      	lsrs	r1, r1, #1
 800422c:	2000      	movs	r0, #0
 800422e:	4688      	mov	r8, r1
 8004230:	4681      	mov	r9, r0
 8004232:	eb12 0a08 	adds.w	sl, r2, r8
 8004236:	eb43 0b09 	adc.w	fp, r3, r9
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004248:	4650      	mov	r0, sl
 800424a:	4659      	mov	r1, fp
 800424c:	f7fc f820 	bl	8000290 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4613      	mov	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800425e:	d308      	bcc.n	8004272 <UART_SetConfig+0x3de>
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004266:	d204      	bcs.n	8004272 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	e0b6      	b.n	80043e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004278:	e0b2      	b.n	80043e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004282:	d15e      	bne.n	8004342 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004284:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004288:	2b08      	cmp	r3, #8
 800428a:	d828      	bhi.n	80042de <UART_SetConfig+0x44a>
 800428c:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <UART_SetConfig+0x400>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042c1 	.word	0x080042c1
 800429c:	080042c9 	.word	0x080042c9
 80042a0:	080042df 	.word	0x080042df
 80042a4:	080042cf 	.word	0x080042cf
 80042a8:	080042df 	.word	0x080042df
 80042ac:	080042df 	.word	0x080042df
 80042b0:	080042df 	.word	0x080042df
 80042b4:	080042d7 	.word	0x080042d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7fd fdb2 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 80042bc:	61f8      	str	r0, [r7, #28]
        break;
 80042be:	e014      	b.n	80042ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7fd fdc4 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 80042c4:	61f8      	str	r0, [r7, #28]
        break;
 80042c6:	e010      	b.n	80042ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004400 <UART_SetConfig+0x56c>)
 80042ca:	61fb      	str	r3, [r7, #28]
        break;
 80042cc:	e00d      	b.n	80042ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ce:	f7fd fd0f 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 80042d2:	61f8      	str	r0, [r7, #28]
        break;
 80042d4:	e009      	b.n	80042ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042da:	61fb      	str	r3, [r7, #28]
        break;
 80042dc:	e005      	b.n	80042ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d077      	beq.n	80043e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	005a      	lsls	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	441a      	add	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b0f      	cmp	r3, #15
 800430a:	d916      	bls.n	800433a <UART_SetConfig+0x4a6>
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004312:	d212      	bcs.n	800433a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f023 030f 	bic.w	r3, r3, #15
 800431c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	b29b      	uxth	r3, r3
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	b29a      	uxth	r2, r3
 800432a:	8afb      	ldrh	r3, [r7, #22]
 800432c:	4313      	orrs	r3, r2
 800432e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	8afa      	ldrh	r2, [r7, #22]
 8004336:	60da      	str	r2, [r3, #12]
 8004338:	e052      	b.n	80043e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004340:	e04e      	b.n	80043e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004342:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004346:	2b08      	cmp	r3, #8
 8004348:	d827      	bhi.n	800439a <UART_SetConfig+0x506>
 800434a:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <UART_SetConfig+0x4bc>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004375 	.word	0x08004375
 8004354:	0800437d 	.word	0x0800437d
 8004358:	08004385 	.word	0x08004385
 800435c:	0800439b 	.word	0x0800439b
 8004360:	0800438b 	.word	0x0800438b
 8004364:	0800439b 	.word	0x0800439b
 8004368:	0800439b 	.word	0x0800439b
 800436c:	0800439b 	.word	0x0800439b
 8004370:	08004393 	.word	0x08004393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004374:	f7fd fd54 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8004378:	61f8      	str	r0, [r7, #28]
        break;
 800437a:	e014      	b.n	80043a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7fd fd66 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 8004380:	61f8      	str	r0, [r7, #28]
        break;
 8004382:	e010      	b.n	80043a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004384:	4b1e      	ldr	r3, [pc, #120]	@ (8004400 <UART_SetConfig+0x56c>)
 8004386:	61fb      	str	r3, [r7, #28]
        break;
 8004388:	e00d      	b.n	80043a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438a:	f7fd fcb1 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 800438e:	61f8      	str	r0, [r7, #28]
        break;
 8004390:	e009      	b.n	80043a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004396:	61fb      	str	r3, [r7, #28]
        break;
 8004398:	e005      	b.n	80043a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043a4:	bf00      	nop
    }

    if (pclk != 0U)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d019      	beq.n	80043e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	085a      	lsrs	r2, r3, #1
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	441a      	add	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d909      	bls.n	80043da <UART_SetConfig+0x546>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043cc:	d205      	bcs.n	80043da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60da      	str	r2, [r3, #12]
 80043d8:	e002      	b.n	80043e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80043ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3728      	adds	r7, #40	@ 0x28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fa:	bf00      	nop
 80043fc:	40008000 	.word	0x40008000
 8004400:	00f42400 	.word	0x00f42400

08004404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01a      	beq.n	800451a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004502:	d10a      	bne.n	800451a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b098      	sub	sp, #96	@ 0x60
 800454c:	af02      	add	r7, sp, #8
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004558:	f7fc fb26 	bl	8000ba8 <HAL_GetTick>
 800455c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d12e      	bne.n	80045ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800456c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004574:	2200      	movs	r2, #0
 8004576:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f88c 	bl	8004698 <UART_WaitOnFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d021      	beq.n	80045ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800459a:	653b      	str	r3, [r7, #80]	@ 0x50
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e062      	b.n	8004690 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d149      	bne.n	800466c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e0:	2200      	movs	r2, #0
 80045e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f856 	bl	8004698 <UART_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d03c      	beq.n	800466c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004610:	633b      	str	r3, [r7, #48]	@ 0x30
 8004612:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e6      	bne.n	80045f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	60fb      	str	r3, [r7, #12]
   return(result);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004644:	61fa      	str	r2, [r7, #28]
 8004646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	617b      	str	r3, [r7, #20]
   return(result);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e011      	b.n	8004690 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3758      	adds	r7, #88	@ 0x58
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a8:	e04f      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d04b      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fc fa79 	bl	8000ba8 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e04e      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d037      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0xb2>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b80      	cmp	r3, #128	@ 0x80
 80046de:	d034      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0xb2>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b40      	cmp	r3, #64	@ 0x40
 80046e4:	d031      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d110      	bne.n	8004716 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2208      	movs	r2, #8
 80046fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f838 	bl	8004772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2208      	movs	r2, #8
 8004706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e029      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004724:	d111      	bne.n	800474a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800472e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f81e 	bl	8004772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e00f      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4013      	ands	r3, r2
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	bf0c      	ite	eq
 800475a:	2301      	moveq	r3, #1
 800475c:	2300      	movne	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	429a      	cmp	r2, r3
 8004766:	d0a0      	beq.n	80046aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004772:	b480      	push	{r7}
 8004774:	b095      	sub	sp, #84	@ 0x54
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004782:	e853 3f00 	ldrex	r3, [r3]
 8004786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800478e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004798:	643b      	str	r3, [r7, #64]	@ 0x40
 800479a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800479e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e6      	bne.n	800477a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3308      	adds	r3, #8
 80047b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f023 0301 	bic.w	r3, r3, #1
 80047c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3308      	adds	r3, #8
 80047ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e5      	bne.n	80047ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d118      	bne.n	800481a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f023 0310 	bic.w	r3, r3, #16
 80047fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6979      	ldr	r1, [r7, #20]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	613b      	str	r3, [r7, #16]
   return(result);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e6      	bne.n	80047e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800482e:	bf00      	nop
 8004830:	3754      	adds	r7, #84	@ 0x54
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff fb05 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b088      	sub	sp, #32
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	60bb      	str	r3, [r7, #8]
   return(result);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6979      	ldr	r1, [r7, #20]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	613b      	str	r3, [r7, #16]
   return(result);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e6      	bne.n	800486e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fad1 	bl	8003e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048b2:	bf00      	nop
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <atoi>:
 80048ce:	220a      	movs	r2, #10
 80048d0:	2100      	movs	r1, #0
 80048d2:	f000 b87b 	b.w	80049cc <strtol>
	...

080048d8 <_strtol_l.constprop.0>:
 80048d8:	2b24      	cmp	r3, #36	@ 0x24
 80048da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048de:	4686      	mov	lr, r0
 80048e0:	4690      	mov	r8, r2
 80048e2:	d801      	bhi.n	80048e8 <_strtol_l.constprop.0+0x10>
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d106      	bne.n	80048f6 <_strtol_l.constprop.0+0x1e>
 80048e8:	f000 f8a2 	bl	8004a30 <__errno>
 80048ec:	2316      	movs	r3, #22
 80048ee:	6003      	str	r3, [r0, #0]
 80048f0:	2000      	movs	r0, #0
 80048f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f6:	4834      	ldr	r0, [pc, #208]	@ (80049c8 <_strtol_l.constprop.0+0xf0>)
 80048f8:	460d      	mov	r5, r1
 80048fa:	462a      	mov	r2, r5
 80048fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004900:	5d06      	ldrb	r6, [r0, r4]
 8004902:	f016 0608 	ands.w	r6, r6, #8
 8004906:	d1f8      	bne.n	80048fa <_strtol_l.constprop.0+0x22>
 8004908:	2c2d      	cmp	r4, #45	@ 0x2d
 800490a:	d12d      	bne.n	8004968 <_strtol_l.constprop.0+0x90>
 800490c:	782c      	ldrb	r4, [r5, #0]
 800490e:	2601      	movs	r6, #1
 8004910:	1c95      	adds	r5, r2, #2
 8004912:	f033 0210 	bics.w	r2, r3, #16
 8004916:	d109      	bne.n	800492c <_strtol_l.constprop.0+0x54>
 8004918:	2c30      	cmp	r4, #48	@ 0x30
 800491a:	d12a      	bne.n	8004972 <_strtol_l.constprop.0+0x9a>
 800491c:	782a      	ldrb	r2, [r5, #0]
 800491e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004922:	2a58      	cmp	r2, #88	@ 0x58
 8004924:	d125      	bne.n	8004972 <_strtol_l.constprop.0+0x9a>
 8004926:	786c      	ldrb	r4, [r5, #1]
 8004928:	2310      	movs	r3, #16
 800492a:	3502      	adds	r5, #2
 800492c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004930:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004934:	2200      	movs	r2, #0
 8004936:	fbbc f9f3 	udiv	r9, ip, r3
 800493a:	4610      	mov	r0, r2
 800493c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004940:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004944:	2f09      	cmp	r7, #9
 8004946:	d81b      	bhi.n	8004980 <_strtol_l.constprop.0+0xa8>
 8004948:	463c      	mov	r4, r7
 800494a:	42a3      	cmp	r3, r4
 800494c:	dd27      	ble.n	800499e <_strtol_l.constprop.0+0xc6>
 800494e:	1c57      	adds	r7, r2, #1
 8004950:	d007      	beq.n	8004962 <_strtol_l.constprop.0+0x8a>
 8004952:	4581      	cmp	r9, r0
 8004954:	d320      	bcc.n	8004998 <_strtol_l.constprop.0+0xc0>
 8004956:	d101      	bne.n	800495c <_strtol_l.constprop.0+0x84>
 8004958:	45a2      	cmp	sl, r4
 800495a:	db1d      	blt.n	8004998 <_strtol_l.constprop.0+0xc0>
 800495c:	fb00 4003 	mla	r0, r0, r3, r4
 8004960:	2201      	movs	r2, #1
 8004962:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004966:	e7eb      	b.n	8004940 <_strtol_l.constprop.0+0x68>
 8004968:	2c2b      	cmp	r4, #43	@ 0x2b
 800496a:	bf04      	itt	eq
 800496c:	782c      	ldrbeq	r4, [r5, #0]
 800496e:	1c95      	addeq	r5, r2, #2
 8004970:	e7cf      	b.n	8004912 <_strtol_l.constprop.0+0x3a>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1da      	bne.n	800492c <_strtol_l.constprop.0+0x54>
 8004976:	2c30      	cmp	r4, #48	@ 0x30
 8004978:	bf0c      	ite	eq
 800497a:	2308      	moveq	r3, #8
 800497c:	230a      	movne	r3, #10
 800497e:	e7d5      	b.n	800492c <_strtol_l.constprop.0+0x54>
 8004980:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004984:	2f19      	cmp	r7, #25
 8004986:	d801      	bhi.n	800498c <_strtol_l.constprop.0+0xb4>
 8004988:	3c37      	subs	r4, #55	@ 0x37
 800498a:	e7de      	b.n	800494a <_strtol_l.constprop.0+0x72>
 800498c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004990:	2f19      	cmp	r7, #25
 8004992:	d804      	bhi.n	800499e <_strtol_l.constprop.0+0xc6>
 8004994:	3c57      	subs	r4, #87	@ 0x57
 8004996:	e7d8      	b.n	800494a <_strtol_l.constprop.0+0x72>
 8004998:	f04f 32ff 	mov.w	r2, #4294967295
 800499c:	e7e1      	b.n	8004962 <_strtol_l.constprop.0+0x8a>
 800499e:	1c53      	adds	r3, r2, #1
 80049a0:	d108      	bne.n	80049b4 <_strtol_l.constprop.0+0xdc>
 80049a2:	2322      	movs	r3, #34	@ 0x22
 80049a4:	f8ce 3000 	str.w	r3, [lr]
 80049a8:	4660      	mov	r0, ip
 80049aa:	f1b8 0f00 	cmp.w	r8, #0
 80049ae:	d0a0      	beq.n	80048f2 <_strtol_l.constprop.0+0x1a>
 80049b0:	1e69      	subs	r1, r5, #1
 80049b2:	e006      	b.n	80049c2 <_strtol_l.constprop.0+0xea>
 80049b4:	b106      	cbz	r6, 80049b8 <_strtol_l.constprop.0+0xe0>
 80049b6:	4240      	negs	r0, r0
 80049b8:	f1b8 0f00 	cmp.w	r8, #0
 80049bc:	d099      	beq.n	80048f2 <_strtol_l.constprop.0+0x1a>
 80049be:	2a00      	cmp	r2, #0
 80049c0:	d1f6      	bne.n	80049b0 <_strtol_l.constprop.0+0xd8>
 80049c2:	f8c8 1000 	str.w	r1, [r8]
 80049c6:	e794      	b.n	80048f2 <_strtol_l.constprop.0+0x1a>
 80049c8:	080053bd 	.word	0x080053bd

080049cc <strtol>:
 80049cc:	4613      	mov	r3, r2
 80049ce:	460a      	mov	r2, r1
 80049d0:	4601      	mov	r1, r0
 80049d2:	4802      	ldr	r0, [pc, #8]	@ (80049dc <strtol+0x10>)
 80049d4:	6800      	ldr	r0, [r0, #0]
 80049d6:	f7ff bf7f 	b.w	80048d8 <_strtol_l.constprop.0>
 80049da:	bf00      	nop
 80049dc:	2000000c 	.word	0x2000000c

080049e0 <siprintf>:
 80049e0:	b40e      	push	{r1, r2, r3}
 80049e2:	b500      	push	{lr}
 80049e4:	b09c      	sub	sp, #112	@ 0x70
 80049e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80049e8:	9002      	str	r0, [sp, #8]
 80049ea:	9006      	str	r0, [sp, #24]
 80049ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049f0:	4809      	ldr	r0, [pc, #36]	@ (8004a18 <siprintf+0x38>)
 80049f2:	9107      	str	r1, [sp, #28]
 80049f4:	9104      	str	r1, [sp, #16]
 80049f6:	4909      	ldr	r1, [pc, #36]	@ (8004a1c <siprintf+0x3c>)
 80049f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049fc:	9105      	str	r1, [sp, #20]
 80049fe:	6800      	ldr	r0, [r0, #0]
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	a902      	add	r1, sp, #8
 8004a04:	f000 f994 	bl	8004d30 <_svfiprintf_r>
 8004a08:	9b02      	ldr	r3, [sp, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	b01c      	add	sp, #112	@ 0x70
 8004a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a14:	b003      	add	sp, #12
 8004a16:	4770      	bx	lr
 8004a18:	2000000c 	.word	0x2000000c
 8004a1c:	ffff0208 	.word	0xffff0208

08004a20 <memset>:
 8004a20:	4402      	add	r2, r0
 8004a22:	4603      	mov	r3, r0
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <memset+0xa>
 8004a28:	4770      	bx	lr
 8004a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2e:	e7f9      	b.n	8004a24 <memset+0x4>

08004a30 <__errno>:
 8004a30:	4b01      	ldr	r3, [pc, #4]	@ (8004a38 <__errno+0x8>)
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	2000000c 	.word	0x2000000c

08004a3c <__libc_init_array>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a74 <__libc_init_array+0x38>)
 8004a40:	4c0d      	ldr	r4, [pc, #52]	@ (8004a78 <__libc_init_array+0x3c>)
 8004a42:	1b64      	subs	r4, r4, r5
 8004a44:	10a4      	asrs	r4, r4, #2
 8004a46:	2600      	movs	r6, #0
 8004a48:	42a6      	cmp	r6, r4
 8004a4a:	d109      	bne.n	8004a60 <__libc_init_array+0x24>
 8004a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a7c <__libc_init_array+0x40>)
 8004a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8004a80 <__libc_init_array+0x44>)
 8004a50:	f000 fc66 	bl	8005320 <_init>
 8004a54:	1b64      	subs	r4, r4, r5
 8004a56:	10a4      	asrs	r4, r4, #2
 8004a58:	2600      	movs	r6, #0
 8004a5a:	42a6      	cmp	r6, r4
 8004a5c:	d105      	bne.n	8004a6a <__libc_init_array+0x2e>
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a64:	4798      	blx	r3
 8004a66:	3601      	adds	r6, #1
 8004a68:	e7ee      	b.n	8004a48 <__libc_init_array+0xc>
 8004a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6e:	4798      	blx	r3
 8004a70:	3601      	adds	r6, #1
 8004a72:	e7f2      	b.n	8004a5a <__libc_init_array+0x1e>
 8004a74:	080054f8 	.word	0x080054f8
 8004a78:	080054f8 	.word	0x080054f8
 8004a7c:	080054f8 	.word	0x080054f8
 8004a80:	080054fc 	.word	0x080054fc

08004a84 <__retarget_lock_acquire_recursive>:
 8004a84:	4770      	bx	lr

08004a86 <__retarget_lock_release_recursive>:
 8004a86:	4770      	bx	lr

08004a88 <_free_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	d041      	beq.n	8004b14 <_free_r+0x8c>
 8004a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a94:	1f0c      	subs	r4, r1, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bfb8      	it	lt
 8004a9a:	18e4      	addlt	r4, r4, r3
 8004a9c:	f000 f8e0 	bl	8004c60 <__malloc_lock>
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <_free_r+0x90>)
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	b933      	cbnz	r3, 8004ab4 <_free_r+0x2c>
 8004aa6:	6063      	str	r3, [r4, #4]
 8004aa8:	6014      	str	r4, [r2, #0]
 8004aaa:	4628      	mov	r0, r5
 8004aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ab0:	f000 b8dc 	b.w	8004c6c <__malloc_unlock>
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	d908      	bls.n	8004aca <_free_r+0x42>
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	1821      	adds	r1, r4, r0
 8004abc:	428b      	cmp	r3, r1
 8004abe:	bf01      	itttt	eq
 8004ac0:	6819      	ldreq	r1, [r3, #0]
 8004ac2:	685b      	ldreq	r3, [r3, #4]
 8004ac4:	1809      	addeq	r1, r1, r0
 8004ac6:	6021      	streq	r1, [r4, #0]
 8004ac8:	e7ed      	b.n	8004aa6 <_free_r+0x1e>
 8004aca:	461a      	mov	r2, r3
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	b10b      	cbz	r3, 8004ad4 <_free_r+0x4c>
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	d9fa      	bls.n	8004aca <_free_r+0x42>
 8004ad4:	6811      	ldr	r1, [r2, #0]
 8004ad6:	1850      	adds	r0, r2, r1
 8004ad8:	42a0      	cmp	r0, r4
 8004ada:	d10b      	bne.n	8004af4 <_free_r+0x6c>
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	4401      	add	r1, r0
 8004ae0:	1850      	adds	r0, r2, r1
 8004ae2:	4283      	cmp	r3, r0
 8004ae4:	6011      	str	r1, [r2, #0]
 8004ae6:	d1e0      	bne.n	8004aaa <_free_r+0x22>
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	6053      	str	r3, [r2, #4]
 8004aee:	4408      	add	r0, r1
 8004af0:	6010      	str	r0, [r2, #0]
 8004af2:	e7da      	b.n	8004aaa <_free_r+0x22>
 8004af4:	d902      	bls.n	8004afc <_free_r+0x74>
 8004af6:	230c      	movs	r3, #12
 8004af8:	602b      	str	r3, [r5, #0]
 8004afa:	e7d6      	b.n	8004aaa <_free_r+0x22>
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	1821      	adds	r1, r4, r0
 8004b00:	428b      	cmp	r3, r1
 8004b02:	bf04      	itt	eq
 8004b04:	6819      	ldreq	r1, [r3, #0]
 8004b06:	685b      	ldreq	r3, [r3, #4]
 8004b08:	6063      	str	r3, [r4, #4]
 8004b0a:	bf04      	itt	eq
 8004b0c:	1809      	addeq	r1, r1, r0
 8004b0e:	6021      	streq	r1, [r4, #0]
 8004b10:	6054      	str	r4, [r2, #4]
 8004b12:	e7ca      	b.n	8004aaa <_free_r+0x22>
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	bf00      	nop
 8004b18:	20000314 	.word	0x20000314

08004b1c <sbrk_aligned>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4e0f      	ldr	r6, [pc, #60]	@ (8004b5c <sbrk_aligned+0x40>)
 8004b20:	460c      	mov	r4, r1
 8004b22:	6831      	ldr	r1, [r6, #0]
 8004b24:	4605      	mov	r5, r0
 8004b26:	b911      	cbnz	r1, 8004b2e <sbrk_aligned+0x12>
 8004b28:	f000 fba6 	bl	8005278 <_sbrk_r>
 8004b2c:	6030      	str	r0, [r6, #0]
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4628      	mov	r0, r5
 8004b32:	f000 fba1 	bl	8005278 <_sbrk_r>
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	d103      	bne.n	8004b42 <sbrk_aligned+0x26>
 8004b3a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b3e:	4620      	mov	r0, r4
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	1cc4      	adds	r4, r0, #3
 8004b44:	f024 0403 	bic.w	r4, r4, #3
 8004b48:	42a0      	cmp	r0, r4
 8004b4a:	d0f8      	beq.n	8004b3e <sbrk_aligned+0x22>
 8004b4c:	1a21      	subs	r1, r4, r0
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f000 fb92 	bl	8005278 <_sbrk_r>
 8004b54:	3001      	adds	r0, #1
 8004b56:	d1f2      	bne.n	8004b3e <sbrk_aligned+0x22>
 8004b58:	e7ef      	b.n	8004b3a <sbrk_aligned+0x1e>
 8004b5a:	bf00      	nop
 8004b5c:	20000310 	.word	0x20000310

08004b60 <_malloc_r>:
 8004b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b64:	1ccd      	adds	r5, r1, #3
 8004b66:	f025 0503 	bic.w	r5, r5, #3
 8004b6a:	3508      	adds	r5, #8
 8004b6c:	2d0c      	cmp	r5, #12
 8004b6e:	bf38      	it	cc
 8004b70:	250c      	movcc	r5, #12
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	4606      	mov	r6, r0
 8004b76:	db01      	blt.n	8004b7c <_malloc_r+0x1c>
 8004b78:	42a9      	cmp	r1, r5
 8004b7a:	d904      	bls.n	8004b86 <_malloc_r+0x26>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	6033      	str	r3, [r6, #0]
 8004b80:	2000      	movs	r0, #0
 8004b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c5c <_malloc_r+0xfc>
 8004b8a:	f000 f869 	bl	8004c60 <__malloc_lock>
 8004b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b92:	461c      	mov	r4, r3
 8004b94:	bb44      	cbnz	r4, 8004be8 <_malloc_r+0x88>
 8004b96:	4629      	mov	r1, r5
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f7ff ffbf 	bl	8004b1c <sbrk_aligned>
 8004b9e:	1c43      	adds	r3, r0, #1
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	d158      	bne.n	8004c56 <_malloc_r+0xf6>
 8004ba4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ba8:	4627      	mov	r7, r4
 8004baa:	2f00      	cmp	r7, #0
 8004bac:	d143      	bne.n	8004c36 <_malloc_r+0xd6>
 8004bae:	2c00      	cmp	r4, #0
 8004bb0:	d04b      	beq.n	8004c4a <_malloc_r+0xea>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	eb04 0903 	add.w	r9, r4, r3
 8004bbc:	f000 fb5c 	bl	8005278 <_sbrk_r>
 8004bc0:	4581      	cmp	r9, r0
 8004bc2:	d142      	bne.n	8004c4a <_malloc_r+0xea>
 8004bc4:	6821      	ldr	r1, [r4, #0]
 8004bc6:	1a6d      	subs	r5, r5, r1
 8004bc8:	4629      	mov	r1, r5
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7ff ffa6 	bl	8004b1c <sbrk_aligned>
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d03a      	beq.n	8004c4a <_malloc_r+0xea>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	442b      	add	r3, r5
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	f8d8 3000 	ldr.w	r3, [r8]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	bb62      	cbnz	r2, 8004c3c <_malloc_r+0xdc>
 8004be2:	f8c8 7000 	str.w	r7, [r8]
 8004be6:	e00f      	b.n	8004c08 <_malloc_r+0xa8>
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	1b52      	subs	r2, r2, r5
 8004bec:	d420      	bmi.n	8004c30 <_malloc_r+0xd0>
 8004bee:	2a0b      	cmp	r2, #11
 8004bf0:	d917      	bls.n	8004c22 <_malloc_r+0xc2>
 8004bf2:	1961      	adds	r1, r4, r5
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	6025      	str	r5, [r4, #0]
 8004bf8:	bf18      	it	ne
 8004bfa:	6059      	strne	r1, [r3, #4]
 8004bfc:	6863      	ldr	r3, [r4, #4]
 8004bfe:	bf08      	it	eq
 8004c00:	f8c8 1000 	streq.w	r1, [r8]
 8004c04:	5162      	str	r2, [r4, r5]
 8004c06:	604b      	str	r3, [r1, #4]
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 f82f 	bl	8004c6c <__malloc_unlock>
 8004c0e:	f104 000b 	add.w	r0, r4, #11
 8004c12:	1d23      	adds	r3, r4, #4
 8004c14:	f020 0007 	bic.w	r0, r0, #7
 8004c18:	1ac2      	subs	r2, r0, r3
 8004c1a:	bf1c      	itt	ne
 8004c1c:	1a1b      	subne	r3, r3, r0
 8004c1e:	50a3      	strne	r3, [r4, r2]
 8004c20:	e7af      	b.n	8004b82 <_malloc_r+0x22>
 8004c22:	6862      	ldr	r2, [r4, #4]
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	bf0c      	ite	eq
 8004c28:	f8c8 2000 	streq.w	r2, [r8]
 8004c2c:	605a      	strne	r2, [r3, #4]
 8004c2e:	e7eb      	b.n	8004c08 <_malloc_r+0xa8>
 8004c30:	4623      	mov	r3, r4
 8004c32:	6864      	ldr	r4, [r4, #4]
 8004c34:	e7ae      	b.n	8004b94 <_malloc_r+0x34>
 8004c36:	463c      	mov	r4, r7
 8004c38:	687f      	ldr	r7, [r7, #4]
 8004c3a:	e7b6      	b.n	8004baa <_malloc_r+0x4a>
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	d1fb      	bne.n	8004c3c <_malloc_r+0xdc>
 8004c44:	2300      	movs	r3, #0
 8004c46:	6053      	str	r3, [r2, #4]
 8004c48:	e7de      	b.n	8004c08 <_malloc_r+0xa8>
 8004c4a:	230c      	movs	r3, #12
 8004c4c:	6033      	str	r3, [r6, #0]
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 f80c 	bl	8004c6c <__malloc_unlock>
 8004c54:	e794      	b.n	8004b80 <_malloc_r+0x20>
 8004c56:	6005      	str	r5, [r0, #0]
 8004c58:	e7d6      	b.n	8004c08 <_malloc_r+0xa8>
 8004c5a:	bf00      	nop
 8004c5c:	20000314 	.word	0x20000314

08004c60 <__malloc_lock>:
 8004c60:	4801      	ldr	r0, [pc, #4]	@ (8004c68 <__malloc_lock+0x8>)
 8004c62:	f7ff bf0f 	b.w	8004a84 <__retarget_lock_acquire_recursive>
 8004c66:	bf00      	nop
 8004c68:	2000030c 	.word	0x2000030c

08004c6c <__malloc_unlock>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	@ (8004c74 <__malloc_unlock+0x8>)
 8004c6e:	f7ff bf0a 	b.w	8004a86 <__retarget_lock_release_recursive>
 8004c72:	bf00      	nop
 8004c74:	2000030c 	.word	0x2000030c

08004c78 <__ssputs_r>:
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	688e      	ldr	r6, [r1, #8]
 8004c7e:	461f      	mov	r7, r3
 8004c80:	42be      	cmp	r6, r7
 8004c82:	680b      	ldr	r3, [r1, #0]
 8004c84:	4682      	mov	sl, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	4690      	mov	r8, r2
 8004c8a:	d82d      	bhi.n	8004ce8 <__ssputs_r+0x70>
 8004c8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c94:	d026      	beq.n	8004ce4 <__ssputs_r+0x6c>
 8004c96:	6965      	ldr	r5, [r4, #20]
 8004c98:	6909      	ldr	r1, [r1, #16]
 8004c9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c9e:	eba3 0901 	sub.w	r9, r3, r1
 8004ca2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ca6:	1c7b      	adds	r3, r7, #1
 8004ca8:	444b      	add	r3, r9
 8004caa:	106d      	asrs	r5, r5, #1
 8004cac:	429d      	cmp	r5, r3
 8004cae:	bf38      	it	cc
 8004cb0:	461d      	movcc	r5, r3
 8004cb2:	0553      	lsls	r3, r2, #21
 8004cb4:	d527      	bpl.n	8004d06 <__ssputs_r+0x8e>
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	f7ff ff52 	bl	8004b60 <_malloc_r>
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	b360      	cbz	r0, 8004d1a <__ssputs_r+0xa2>
 8004cc0:	6921      	ldr	r1, [r4, #16]
 8004cc2:	464a      	mov	r2, r9
 8004cc4:	f000 fae8 	bl	8005298 <memcpy>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd2:	81a3      	strh	r3, [r4, #12]
 8004cd4:	6126      	str	r6, [r4, #16]
 8004cd6:	6165      	str	r5, [r4, #20]
 8004cd8:	444e      	add	r6, r9
 8004cda:	eba5 0509 	sub.w	r5, r5, r9
 8004cde:	6026      	str	r6, [r4, #0]
 8004ce0:	60a5      	str	r5, [r4, #8]
 8004ce2:	463e      	mov	r6, r7
 8004ce4:	42be      	cmp	r6, r7
 8004ce6:	d900      	bls.n	8004cea <__ssputs_r+0x72>
 8004ce8:	463e      	mov	r6, r7
 8004cea:	6820      	ldr	r0, [r4, #0]
 8004cec:	4632      	mov	r2, r6
 8004cee:	4641      	mov	r1, r8
 8004cf0:	f000 faa8 	bl	8005244 <memmove>
 8004cf4:	68a3      	ldr	r3, [r4, #8]
 8004cf6:	1b9b      	subs	r3, r3, r6
 8004cf8:	60a3      	str	r3, [r4, #8]
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	4433      	add	r3, r6
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	2000      	movs	r0, #0
 8004d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d06:	462a      	mov	r2, r5
 8004d08:	f000 fad4 	bl	80052b4 <_realloc_r>
 8004d0c:	4606      	mov	r6, r0
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d1e0      	bne.n	8004cd4 <__ssputs_r+0x5c>
 8004d12:	6921      	ldr	r1, [r4, #16]
 8004d14:	4650      	mov	r0, sl
 8004d16:	f7ff feb7 	bl	8004a88 <_free_r>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	f8ca 3000 	str.w	r3, [sl]
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d26:	81a3      	strh	r3, [r4, #12]
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	e7e9      	b.n	8004d02 <__ssputs_r+0x8a>
	...

08004d30 <_svfiprintf_r>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	4698      	mov	r8, r3
 8004d36:	898b      	ldrh	r3, [r1, #12]
 8004d38:	061b      	lsls	r3, r3, #24
 8004d3a:	b09d      	sub	sp, #116	@ 0x74
 8004d3c:	4607      	mov	r7, r0
 8004d3e:	460d      	mov	r5, r1
 8004d40:	4614      	mov	r4, r2
 8004d42:	d510      	bpl.n	8004d66 <_svfiprintf_r+0x36>
 8004d44:	690b      	ldr	r3, [r1, #16]
 8004d46:	b973      	cbnz	r3, 8004d66 <_svfiprintf_r+0x36>
 8004d48:	2140      	movs	r1, #64	@ 0x40
 8004d4a:	f7ff ff09 	bl	8004b60 <_malloc_r>
 8004d4e:	6028      	str	r0, [r5, #0]
 8004d50:	6128      	str	r0, [r5, #16]
 8004d52:	b930      	cbnz	r0, 8004d62 <_svfiprintf_r+0x32>
 8004d54:	230c      	movs	r3, #12
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	b01d      	add	sp, #116	@ 0x74
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	2340      	movs	r3, #64	@ 0x40
 8004d64:	616b      	str	r3, [r5, #20]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d6a:	2320      	movs	r3, #32
 8004d6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d74:	2330      	movs	r3, #48	@ 0x30
 8004d76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f14 <_svfiprintf_r+0x1e4>
 8004d7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d7e:	f04f 0901 	mov.w	r9, #1
 8004d82:	4623      	mov	r3, r4
 8004d84:	469a      	mov	sl, r3
 8004d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d8a:	b10a      	cbz	r2, 8004d90 <_svfiprintf_r+0x60>
 8004d8c:	2a25      	cmp	r2, #37	@ 0x25
 8004d8e:	d1f9      	bne.n	8004d84 <_svfiprintf_r+0x54>
 8004d90:	ebba 0b04 	subs.w	fp, sl, r4
 8004d94:	d00b      	beq.n	8004dae <_svfiprintf_r+0x7e>
 8004d96:	465b      	mov	r3, fp
 8004d98:	4622      	mov	r2, r4
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	f7ff ff6b 	bl	8004c78 <__ssputs_r>
 8004da2:	3001      	adds	r0, #1
 8004da4:	f000 80a7 	beq.w	8004ef6 <_svfiprintf_r+0x1c6>
 8004da8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004daa:	445a      	add	r2, fp
 8004dac:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dae:	f89a 3000 	ldrb.w	r3, [sl]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 809f 	beq.w	8004ef6 <_svfiprintf_r+0x1c6>
 8004db8:	2300      	movs	r3, #0
 8004dba:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dc2:	f10a 0a01 	add.w	sl, sl, #1
 8004dc6:	9304      	str	r3, [sp, #16]
 8004dc8:	9307      	str	r3, [sp, #28]
 8004dca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dce:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dd0:	4654      	mov	r4, sl
 8004dd2:	2205      	movs	r2, #5
 8004dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd8:	484e      	ldr	r0, [pc, #312]	@ (8004f14 <_svfiprintf_r+0x1e4>)
 8004dda:	f7fb fa09 	bl	80001f0 <memchr>
 8004dde:	9a04      	ldr	r2, [sp, #16]
 8004de0:	b9d8      	cbnz	r0, 8004e1a <_svfiprintf_r+0xea>
 8004de2:	06d0      	lsls	r0, r2, #27
 8004de4:	bf44      	itt	mi
 8004de6:	2320      	movmi	r3, #32
 8004de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dec:	0711      	lsls	r1, r2, #28
 8004dee:	bf44      	itt	mi
 8004df0:	232b      	movmi	r3, #43	@ 0x2b
 8004df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004df6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dfc:	d015      	beq.n	8004e2a <_svfiprintf_r+0xfa>
 8004dfe:	9a07      	ldr	r2, [sp, #28]
 8004e00:	4654      	mov	r4, sl
 8004e02:	2000      	movs	r0, #0
 8004e04:	f04f 0c0a 	mov.w	ip, #10
 8004e08:	4621      	mov	r1, r4
 8004e0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e0e:	3b30      	subs	r3, #48	@ 0x30
 8004e10:	2b09      	cmp	r3, #9
 8004e12:	d94b      	bls.n	8004eac <_svfiprintf_r+0x17c>
 8004e14:	b1b0      	cbz	r0, 8004e44 <_svfiprintf_r+0x114>
 8004e16:	9207      	str	r2, [sp, #28]
 8004e18:	e014      	b.n	8004e44 <_svfiprintf_r+0x114>
 8004e1a:	eba0 0308 	sub.w	r3, r0, r8
 8004e1e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e22:	4313      	orrs	r3, r2
 8004e24:	9304      	str	r3, [sp, #16]
 8004e26:	46a2      	mov	sl, r4
 8004e28:	e7d2      	b.n	8004dd0 <_svfiprintf_r+0xa0>
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	1d19      	adds	r1, r3, #4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	9103      	str	r1, [sp, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bfbb      	ittet	lt
 8004e36:	425b      	neglt	r3, r3
 8004e38:	f042 0202 	orrlt.w	r2, r2, #2
 8004e3c:	9307      	strge	r3, [sp, #28]
 8004e3e:	9307      	strlt	r3, [sp, #28]
 8004e40:	bfb8      	it	lt
 8004e42:	9204      	strlt	r2, [sp, #16]
 8004e44:	7823      	ldrb	r3, [r4, #0]
 8004e46:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e48:	d10a      	bne.n	8004e60 <_svfiprintf_r+0x130>
 8004e4a:	7863      	ldrb	r3, [r4, #1]
 8004e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e4e:	d132      	bne.n	8004eb6 <_svfiprintf_r+0x186>
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	9203      	str	r2, [sp, #12]
 8004e58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e5c:	3402      	adds	r4, #2
 8004e5e:	9305      	str	r3, [sp, #20]
 8004e60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f24 <_svfiprintf_r+0x1f4>
 8004e64:	7821      	ldrb	r1, [r4, #0]
 8004e66:	2203      	movs	r2, #3
 8004e68:	4650      	mov	r0, sl
 8004e6a:	f7fb f9c1 	bl	80001f0 <memchr>
 8004e6e:	b138      	cbz	r0, 8004e80 <_svfiprintf_r+0x150>
 8004e70:	9b04      	ldr	r3, [sp, #16]
 8004e72:	eba0 000a 	sub.w	r0, r0, sl
 8004e76:	2240      	movs	r2, #64	@ 0x40
 8004e78:	4082      	lsls	r2, r0
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	3401      	adds	r4, #1
 8004e7e:	9304      	str	r3, [sp, #16]
 8004e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e84:	4824      	ldr	r0, [pc, #144]	@ (8004f18 <_svfiprintf_r+0x1e8>)
 8004e86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e8a:	2206      	movs	r2, #6
 8004e8c:	f7fb f9b0 	bl	80001f0 <memchr>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d036      	beq.n	8004f02 <_svfiprintf_r+0x1d2>
 8004e94:	4b21      	ldr	r3, [pc, #132]	@ (8004f1c <_svfiprintf_r+0x1ec>)
 8004e96:	bb1b      	cbnz	r3, 8004ee0 <_svfiprintf_r+0x1b0>
 8004e98:	9b03      	ldr	r3, [sp, #12]
 8004e9a:	3307      	adds	r3, #7
 8004e9c:	f023 0307 	bic.w	r3, r3, #7
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	9303      	str	r3, [sp, #12]
 8004ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ea6:	4433      	add	r3, r6
 8004ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eaa:	e76a      	b.n	8004d82 <_svfiprintf_r+0x52>
 8004eac:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	e7a8      	b.n	8004e08 <_svfiprintf_r+0xd8>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	3401      	adds	r4, #1
 8004eba:	9305      	str	r3, [sp, #20]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f04f 0c0a 	mov.w	ip, #10
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ec8:	3a30      	subs	r2, #48	@ 0x30
 8004eca:	2a09      	cmp	r2, #9
 8004ecc:	d903      	bls.n	8004ed6 <_svfiprintf_r+0x1a6>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0c6      	beq.n	8004e60 <_svfiprintf_r+0x130>
 8004ed2:	9105      	str	r1, [sp, #20]
 8004ed4:	e7c4      	b.n	8004e60 <_svfiprintf_r+0x130>
 8004ed6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eda:	4604      	mov	r4, r0
 8004edc:	2301      	movs	r3, #1
 8004ede:	e7f0      	b.n	8004ec2 <_svfiprintf_r+0x192>
 8004ee0:	ab03      	add	r3, sp, #12
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	462a      	mov	r2, r5
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f20 <_svfiprintf_r+0x1f0>)
 8004ee8:	a904      	add	r1, sp, #16
 8004eea:	4638      	mov	r0, r7
 8004eec:	f3af 8000 	nop.w
 8004ef0:	1c42      	adds	r2, r0, #1
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	d1d6      	bne.n	8004ea4 <_svfiprintf_r+0x174>
 8004ef6:	89ab      	ldrh	r3, [r5, #12]
 8004ef8:	065b      	lsls	r3, r3, #25
 8004efa:	f53f af2d 	bmi.w	8004d58 <_svfiprintf_r+0x28>
 8004efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f00:	e72c      	b.n	8004d5c <_svfiprintf_r+0x2c>
 8004f02:	ab03      	add	r3, sp, #12
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	462a      	mov	r2, r5
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <_svfiprintf_r+0x1f0>)
 8004f0a:	a904      	add	r1, sp, #16
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	f000 f879 	bl	8005004 <_printf_i>
 8004f12:	e7ed      	b.n	8004ef0 <_svfiprintf_r+0x1c0>
 8004f14:	080054bd 	.word	0x080054bd
 8004f18:	080054c7 	.word	0x080054c7
 8004f1c:	00000000 	.word	0x00000000
 8004f20:	08004c79 	.word	0x08004c79
 8004f24:	080054c3 	.word	0x080054c3

08004f28 <_printf_common>:
 8004f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	4698      	mov	r8, r3
 8004f30:	688a      	ldr	r2, [r1, #8]
 8004f32:	690b      	ldr	r3, [r1, #16]
 8004f34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	bfb8      	it	lt
 8004f3c:	4613      	movlt	r3, r2
 8004f3e:	6033      	str	r3, [r6, #0]
 8004f40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f44:	4607      	mov	r7, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	b10a      	cbz	r2, 8004f4e <_printf_common+0x26>
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	6033      	str	r3, [r6, #0]
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	0699      	lsls	r1, r3, #26
 8004f52:	bf42      	ittt	mi
 8004f54:	6833      	ldrmi	r3, [r6, #0]
 8004f56:	3302      	addmi	r3, #2
 8004f58:	6033      	strmi	r3, [r6, #0]
 8004f5a:	6825      	ldr	r5, [r4, #0]
 8004f5c:	f015 0506 	ands.w	r5, r5, #6
 8004f60:	d106      	bne.n	8004f70 <_printf_common+0x48>
 8004f62:	f104 0a19 	add.w	sl, r4, #25
 8004f66:	68e3      	ldr	r3, [r4, #12]
 8004f68:	6832      	ldr	r2, [r6, #0]
 8004f6a:	1a9b      	subs	r3, r3, r2
 8004f6c:	42ab      	cmp	r3, r5
 8004f6e:	dc26      	bgt.n	8004fbe <_printf_common+0x96>
 8004f70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	3b00      	subs	r3, #0
 8004f78:	bf18      	it	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	0692      	lsls	r2, r2, #26
 8004f7e:	d42b      	bmi.n	8004fd8 <_printf_common+0xb0>
 8004f80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f84:	4641      	mov	r1, r8
 8004f86:	4638      	mov	r0, r7
 8004f88:	47c8      	blx	r9
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	d01e      	beq.n	8004fcc <_printf_common+0xa4>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	6922      	ldr	r2, [r4, #16]
 8004f92:	f003 0306 	and.w	r3, r3, #6
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	bf02      	ittt	eq
 8004f9a:	68e5      	ldreq	r5, [r4, #12]
 8004f9c:	6833      	ldreq	r3, [r6, #0]
 8004f9e:	1aed      	subeq	r5, r5, r3
 8004fa0:	68a3      	ldr	r3, [r4, #8]
 8004fa2:	bf0c      	ite	eq
 8004fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fa8:	2500      	movne	r5, #0
 8004faa:	4293      	cmp	r3, r2
 8004fac:	bfc4      	itt	gt
 8004fae:	1a9b      	subgt	r3, r3, r2
 8004fb0:	18ed      	addgt	r5, r5, r3
 8004fb2:	2600      	movs	r6, #0
 8004fb4:	341a      	adds	r4, #26
 8004fb6:	42b5      	cmp	r5, r6
 8004fb8:	d11a      	bne.n	8004ff0 <_printf_common+0xc8>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e008      	b.n	8004fd0 <_printf_common+0xa8>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4652      	mov	r2, sl
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	47c8      	blx	r9
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d103      	bne.n	8004fd4 <_printf_common+0xac>
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	e7c6      	b.n	8004f66 <_printf_common+0x3e>
 8004fd8:	18e1      	adds	r1, r4, r3
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	2030      	movs	r0, #48	@ 0x30
 8004fde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fe2:	4422      	add	r2, r4
 8004fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fec:	3302      	adds	r3, #2
 8004fee:	e7c7      	b.n	8004f80 <_printf_common+0x58>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	47c8      	blx	r9
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d0e6      	beq.n	8004fcc <_printf_common+0xa4>
 8004ffe:	3601      	adds	r6, #1
 8005000:	e7d9      	b.n	8004fb6 <_printf_common+0x8e>
	...

08005004 <_printf_i>:
 8005004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005008:	7e0f      	ldrb	r7, [r1, #24]
 800500a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800500c:	2f78      	cmp	r7, #120	@ 0x78
 800500e:	4691      	mov	r9, r2
 8005010:	4680      	mov	r8, r0
 8005012:	460c      	mov	r4, r1
 8005014:	469a      	mov	sl, r3
 8005016:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800501a:	d807      	bhi.n	800502c <_printf_i+0x28>
 800501c:	2f62      	cmp	r7, #98	@ 0x62
 800501e:	d80a      	bhi.n	8005036 <_printf_i+0x32>
 8005020:	2f00      	cmp	r7, #0
 8005022:	f000 80d2 	beq.w	80051ca <_printf_i+0x1c6>
 8005026:	2f58      	cmp	r7, #88	@ 0x58
 8005028:	f000 80b9 	beq.w	800519e <_printf_i+0x19a>
 800502c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005030:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005034:	e03a      	b.n	80050ac <_printf_i+0xa8>
 8005036:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800503a:	2b15      	cmp	r3, #21
 800503c:	d8f6      	bhi.n	800502c <_printf_i+0x28>
 800503e:	a101      	add	r1, pc, #4	@ (adr r1, 8005044 <_printf_i+0x40>)
 8005040:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005044:	0800509d 	.word	0x0800509d
 8005048:	080050b1 	.word	0x080050b1
 800504c:	0800502d 	.word	0x0800502d
 8005050:	0800502d 	.word	0x0800502d
 8005054:	0800502d 	.word	0x0800502d
 8005058:	0800502d 	.word	0x0800502d
 800505c:	080050b1 	.word	0x080050b1
 8005060:	0800502d 	.word	0x0800502d
 8005064:	0800502d 	.word	0x0800502d
 8005068:	0800502d 	.word	0x0800502d
 800506c:	0800502d 	.word	0x0800502d
 8005070:	080051b1 	.word	0x080051b1
 8005074:	080050db 	.word	0x080050db
 8005078:	0800516b 	.word	0x0800516b
 800507c:	0800502d 	.word	0x0800502d
 8005080:	0800502d 	.word	0x0800502d
 8005084:	080051d3 	.word	0x080051d3
 8005088:	0800502d 	.word	0x0800502d
 800508c:	080050db 	.word	0x080050db
 8005090:	0800502d 	.word	0x0800502d
 8005094:	0800502d 	.word	0x0800502d
 8005098:	08005173 	.word	0x08005173
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	1d1a      	adds	r2, r3, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6032      	str	r2, [r6, #0]
 80050a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050ac:	2301      	movs	r3, #1
 80050ae:	e09d      	b.n	80051ec <_printf_i+0x1e8>
 80050b0:	6833      	ldr	r3, [r6, #0]
 80050b2:	6820      	ldr	r0, [r4, #0]
 80050b4:	1d19      	adds	r1, r3, #4
 80050b6:	6031      	str	r1, [r6, #0]
 80050b8:	0606      	lsls	r6, r0, #24
 80050ba:	d501      	bpl.n	80050c0 <_printf_i+0xbc>
 80050bc:	681d      	ldr	r5, [r3, #0]
 80050be:	e003      	b.n	80050c8 <_printf_i+0xc4>
 80050c0:	0645      	lsls	r5, r0, #25
 80050c2:	d5fb      	bpl.n	80050bc <_printf_i+0xb8>
 80050c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050c8:	2d00      	cmp	r5, #0
 80050ca:	da03      	bge.n	80050d4 <_printf_i+0xd0>
 80050cc:	232d      	movs	r3, #45	@ 0x2d
 80050ce:	426d      	negs	r5, r5
 80050d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d4:	4859      	ldr	r0, [pc, #356]	@ (800523c <_printf_i+0x238>)
 80050d6:	230a      	movs	r3, #10
 80050d8:	e011      	b.n	80050fe <_printf_i+0xfa>
 80050da:	6821      	ldr	r1, [r4, #0]
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	0608      	lsls	r0, r1, #24
 80050e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80050e4:	d402      	bmi.n	80050ec <_printf_i+0xe8>
 80050e6:	0649      	lsls	r1, r1, #25
 80050e8:	bf48      	it	mi
 80050ea:	b2ad      	uxthmi	r5, r5
 80050ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80050ee:	4853      	ldr	r0, [pc, #332]	@ (800523c <_printf_i+0x238>)
 80050f0:	6033      	str	r3, [r6, #0]
 80050f2:	bf14      	ite	ne
 80050f4:	230a      	movne	r3, #10
 80050f6:	2308      	moveq	r3, #8
 80050f8:	2100      	movs	r1, #0
 80050fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050fe:	6866      	ldr	r6, [r4, #4]
 8005100:	60a6      	str	r6, [r4, #8]
 8005102:	2e00      	cmp	r6, #0
 8005104:	bfa2      	ittt	ge
 8005106:	6821      	ldrge	r1, [r4, #0]
 8005108:	f021 0104 	bicge.w	r1, r1, #4
 800510c:	6021      	strge	r1, [r4, #0]
 800510e:	b90d      	cbnz	r5, 8005114 <_printf_i+0x110>
 8005110:	2e00      	cmp	r6, #0
 8005112:	d04b      	beq.n	80051ac <_printf_i+0x1a8>
 8005114:	4616      	mov	r6, r2
 8005116:	fbb5 f1f3 	udiv	r1, r5, r3
 800511a:	fb03 5711 	mls	r7, r3, r1, r5
 800511e:	5dc7      	ldrb	r7, [r0, r7]
 8005120:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005124:	462f      	mov	r7, r5
 8005126:	42bb      	cmp	r3, r7
 8005128:	460d      	mov	r5, r1
 800512a:	d9f4      	bls.n	8005116 <_printf_i+0x112>
 800512c:	2b08      	cmp	r3, #8
 800512e:	d10b      	bne.n	8005148 <_printf_i+0x144>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	07df      	lsls	r7, r3, #31
 8005134:	d508      	bpl.n	8005148 <_printf_i+0x144>
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	6861      	ldr	r1, [r4, #4]
 800513a:	4299      	cmp	r1, r3
 800513c:	bfde      	ittt	le
 800513e:	2330      	movle	r3, #48	@ 0x30
 8005140:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005144:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005148:	1b92      	subs	r2, r2, r6
 800514a:	6122      	str	r2, [r4, #16]
 800514c:	f8cd a000 	str.w	sl, [sp]
 8005150:	464b      	mov	r3, r9
 8005152:	aa03      	add	r2, sp, #12
 8005154:	4621      	mov	r1, r4
 8005156:	4640      	mov	r0, r8
 8005158:	f7ff fee6 	bl	8004f28 <_printf_common>
 800515c:	3001      	adds	r0, #1
 800515e:	d14a      	bne.n	80051f6 <_printf_i+0x1f2>
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	b004      	add	sp, #16
 8005166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	f043 0320 	orr.w	r3, r3, #32
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	4833      	ldr	r0, [pc, #204]	@ (8005240 <_printf_i+0x23c>)
 8005174:	2778      	movs	r7, #120	@ 0x78
 8005176:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	6831      	ldr	r1, [r6, #0]
 800517e:	061f      	lsls	r7, r3, #24
 8005180:	f851 5b04 	ldr.w	r5, [r1], #4
 8005184:	d402      	bmi.n	800518c <_printf_i+0x188>
 8005186:	065f      	lsls	r7, r3, #25
 8005188:	bf48      	it	mi
 800518a:	b2ad      	uxthmi	r5, r5
 800518c:	6031      	str	r1, [r6, #0]
 800518e:	07d9      	lsls	r1, r3, #31
 8005190:	bf44      	itt	mi
 8005192:	f043 0320 	orrmi.w	r3, r3, #32
 8005196:	6023      	strmi	r3, [r4, #0]
 8005198:	b11d      	cbz	r5, 80051a2 <_printf_i+0x19e>
 800519a:	2310      	movs	r3, #16
 800519c:	e7ac      	b.n	80050f8 <_printf_i+0xf4>
 800519e:	4827      	ldr	r0, [pc, #156]	@ (800523c <_printf_i+0x238>)
 80051a0:	e7e9      	b.n	8005176 <_printf_i+0x172>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	f023 0320 	bic.w	r3, r3, #32
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	e7f6      	b.n	800519a <_printf_i+0x196>
 80051ac:	4616      	mov	r6, r2
 80051ae:	e7bd      	b.n	800512c <_printf_i+0x128>
 80051b0:	6833      	ldr	r3, [r6, #0]
 80051b2:	6825      	ldr	r5, [r4, #0]
 80051b4:	6961      	ldr	r1, [r4, #20]
 80051b6:	1d18      	adds	r0, r3, #4
 80051b8:	6030      	str	r0, [r6, #0]
 80051ba:	062e      	lsls	r6, r5, #24
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	d501      	bpl.n	80051c4 <_printf_i+0x1c0>
 80051c0:	6019      	str	r1, [r3, #0]
 80051c2:	e002      	b.n	80051ca <_printf_i+0x1c6>
 80051c4:	0668      	lsls	r0, r5, #25
 80051c6:	d5fb      	bpl.n	80051c0 <_printf_i+0x1bc>
 80051c8:	8019      	strh	r1, [r3, #0]
 80051ca:	2300      	movs	r3, #0
 80051cc:	6123      	str	r3, [r4, #16]
 80051ce:	4616      	mov	r6, r2
 80051d0:	e7bc      	b.n	800514c <_printf_i+0x148>
 80051d2:	6833      	ldr	r3, [r6, #0]
 80051d4:	1d1a      	adds	r2, r3, #4
 80051d6:	6032      	str	r2, [r6, #0]
 80051d8:	681e      	ldr	r6, [r3, #0]
 80051da:	6862      	ldr	r2, [r4, #4]
 80051dc:	2100      	movs	r1, #0
 80051de:	4630      	mov	r0, r6
 80051e0:	f7fb f806 	bl	80001f0 <memchr>
 80051e4:	b108      	cbz	r0, 80051ea <_printf_i+0x1e6>
 80051e6:	1b80      	subs	r0, r0, r6
 80051e8:	6060      	str	r0, [r4, #4]
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	2300      	movs	r3, #0
 80051f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051f4:	e7aa      	b.n	800514c <_printf_i+0x148>
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	4632      	mov	r2, r6
 80051fa:	4649      	mov	r1, r9
 80051fc:	4640      	mov	r0, r8
 80051fe:	47d0      	blx	sl
 8005200:	3001      	adds	r0, #1
 8005202:	d0ad      	beq.n	8005160 <_printf_i+0x15c>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	079b      	lsls	r3, r3, #30
 8005208:	d413      	bmi.n	8005232 <_printf_i+0x22e>
 800520a:	68e0      	ldr	r0, [r4, #12]
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	4298      	cmp	r0, r3
 8005210:	bfb8      	it	lt
 8005212:	4618      	movlt	r0, r3
 8005214:	e7a6      	b.n	8005164 <_printf_i+0x160>
 8005216:	2301      	movs	r3, #1
 8005218:	4632      	mov	r2, r6
 800521a:	4649      	mov	r1, r9
 800521c:	4640      	mov	r0, r8
 800521e:	47d0      	blx	sl
 8005220:	3001      	adds	r0, #1
 8005222:	d09d      	beq.n	8005160 <_printf_i+0x15c>
 8005224:	3501      	adds	r5, #1
 8005226:	68e3      	ldr	r3, [r4, #12]
 8005228:	9903      	ldr	r1, [sp, #12]
 800522a:	1a5b      	subs	r3, r3, r1
 800522c:	42ab      	cmp	r3, r5
 800522e:	dcf2      	bgt.n	8005216 <_printf_i+0x212>
 8005230:	e7eb      	b.n	800520a <_printf_i+0x206>
 8005232:	2500      	movs	r5, #0
 8005234:	f104 0619 	add.w	r6, r4, #25
 8005238:	e7f5      	b.n	8005226 <_printf_i+0x222>
 800523a:	bf00      	nop
 800523c:	080054ce 	.word	0x080054ce
 8005240:	080054df 	.word	0x080054df

08005244 <memmove>:
 8005244:	4288      	cmp	r0, r1
 8005246:	b510      	push	{r4, lr}
 8005248:	eb01 0402 	add.w	r4, r1, r2
 800524c:	d902      	bls.n	8005254 <memmove+0x10>
 800524e:	4284      	cmp	r4, r0
 8005250:	4623      	mov	r3, r4
 8005252:	d807      	bhi.n	8005264 <memmove+0x20>
 8005254:	1e43      	subs	r3, r0, #1
 8005256:	42a1      	cmp	r1, r4
 8005258:	d008      	beq.n	800526c <memmove+0x28>
 800525a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800525e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005262:	e7f8      	b.n	8005256 <memmove+0x12>
 8005264:	4402      	add	r2, r0
 8005266:	4601      	mov	r1, r0
 8005268:	428a      	cmp	r2, r1
 800526a:	d100      	bne.n	800526e <memmove+0x2a>
 800526c:	bd10      	pop	{r4, pc}
 800526e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005276:	e7f7      	b.n	8005268 <memmove+0x24>

08005278 <_sbrk_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4d06      	ldr	r5, [pc, #24]	@ (8005294 <_sbrk_r+0x1c>)
 800527c:	2300      	movs	r3, #0
 800527e:	4604      	mov	r4, r0
 8005280:	4608      	mov	r0, r1
 8005282:	602b      	str	r3, [r5, #0]
 8005284:	f7fb fbb6 	bl	80009f4 <_sbrk>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_sbrk_r+0x1a>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	b103      	cbz	r3, 8005292 <_sbrk_r+0x1a>
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	20000308 	.word	0x20000308

08005298 <memcpy>:
 8005298:	440a      	add	r2, r1
 800529a:	4291      	cmp	r1, r2
 800529c:	f100 33ff 	add.w	r3, r0, #4294967295
 80052a0:	d100      	bne.n	80052a4 <memcpy+0xc>
 80052a2:	4770      	bx	lr
 80052a4:	b510      	push	{r4, lr}
 80052a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ae:	4291      	cmp	r1, r2
 80052b0:	d1f9      	bne.n	80052a6 <memcpy+0xe>
 80052b2:	bd10      	pop	{r4, pc}

080052b4 <_realloc_r>:
 80052b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b8:	4680      	mov	r8, r0
 80052ba:	4615      	mov	r5, r2
 80052bc:	460c      	mov	r4, r1
 80052be:	b921      	cbnz	r1, 80052ca <_realloc_r+0x16>
 80052c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c4:	4611      	mov	r1, r2
 80052c6:	f7ff bc4b 	b.w	8004b60 <_malloc_r>
 80052ca:	b92a      	cbnz	r2, 80052d8 <_realloc_r+0x24>
 80052cc:	f7ff fbdc 	bl	8004a88 <_free_r>
 80052d0:	2400      	movs	r4, #0
 80052d2:	4620      	mov	r0, r4
 80052d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d8:	f000 f81a 	bl	8005310 <_malloc_usable_size_r>
 80052dc:	4285      	cmp	r5, r0
 80052de:	4606      	mov	r6, r0
 80052e0:	d802      	bhi.n	80052e8 <_realloc_r+0x34>
 80052e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052e6:	d8f4      	bhi.n	80052d2 <_realloc_r+0x1e>
 80052e8:	4629      	mov	r1, r5
 80052ea:	4640      	mov	r0, r8
 80052ec:	f7ff fc38 	bl	8004b60 <_malloc_r>
 80052f0:	4607      	mov	r7, r0
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d0ec      	beq.n	80052d0 <_realloc_r+0x1c>
 80052f6:	42b5      	cmp	r5, r6
 80052f8:	462a      	mov	r2, r5
 80052fa:	4621      	mov	r1, r4
 80052fc:	bf28      	it	cs
 80052fe:	4632      	movcs	r2, r6
 8005300:	f7ff ffca 	bl	8005298 <memcpy>
 8005304:	4621      	mov	r1, r4
 8005306:	4640      	mov	r0, r8
 8005308:	f7ff fbbe 	bl	8004a88 <_free_r>
 800530c:	463c      	mov	r4, r7
 800530e:	e7e0      	b.n	80052d2 <_realloc_r+0x1e>

08005310 <_malloc_usable_size_r>:
 8005310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005314:	1f18      	subs	r0, r3, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	bfbc      	itt	lt
 800531a:	580b      	ldrlt	r3, [r1, r0]
 800531c:	18c0      	addlt	r0, r0, r3
 800531e:	4770      	bx	lr

08005320 <_init>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr

0800532c <_fini>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr
